
PROJET_S6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f0  24000010  08006764  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000200  08006764  00020200  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012e04  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002069  00000000  00000000  00032e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d40  00000000  00000000  00034eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c88  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f097  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000124f4  00000000  00000000  0006590f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133275  00000000  00000000  00077e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ab078  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003788  00000000  00000000  001ab0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080066c4 	.word	0x080066c4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080066c4 	.word	0x080066c4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b0a7      	sub	sp, #156	; 0x9c
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	char txt1[]  = "Hello World 3 !";
 80005f6:	4bad      	ldr	r3, [pc, #692]	; (80008ac <main+0x2bc>)
 80005f8:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80005fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char txt2[]  = "Radio started !";
 8000602:	4bab      	ldr	r3, [pc, #684]	; (80008b0 <main+0x2c0>)
 8000604:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fe71 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f95f 	bl	80008d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  uint8_t power_up[3] = {0x01, 0x12, 0x50}; //ou C2 a la place du 12
 8000616:	4aa7      	ldr	r2, [pc, #668]	; (80008b4 <main+0x2c4>)
 8000618:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	4611      	mov	r1, r2
 8000620:	8019      	strh	r1, [r3, #0]
 8000622:	3302      	adds	r3, #2
 8000624:	0c12      	lsrs	r2, r2, #16
 8000626:	701a      	strb	r2, [r3, #0]
  uint8_t tuneFreq[4] = {0x30, 0x00, 0x29, 0xFE};
 8000628:	4ba3      	ldr	r3, [pc, #652]	; (80008b8 <main+0x2c8>)
 800062a:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t intStatus[1] = {0x14};
 800062c:	2314      	movs	r3, #20
 800062e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  uint8_t tuneStatus[2] = {0x33, 0x01};
 8000632:	f240 1333 	movw	r3, #307	; 0x133
 8000636:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint8_t tunePower[5] = {0x31, 0x00, 0x00, 115, 0x00};
 800063a:	4aa0      	ldr	r2, [pc, #640]	; (80008bc <main+0x2cc>)
 800063c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	6018      	str	r0, [r3, #0]
 8000646:	3304      	adds	r3, #4
 8000648:	7019      	strb	r1, [r3, #0]
  uint8_t power_up_res[3] = {};
 800064a:	4b9d      	ldr	r3, [pc, #628]	; (80008c0 <main+0x2d0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8000652:	f107 0351 	add.w	r3, r7, #81	; 0x51
 8000656:	2200      	movs	r2, #0
 8000658:	801a      	strh	r2, [r3, #0]
  uint8_t hal_res[1] = {};
 800065a:	2300      	movs	r3, #0
 800065c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  uint8_t tx_res[8] = {};
 8000660:	2300      	movs	r3, #0
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
 8000664:	2300      	movs	r3, #0
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t gpsDataReceive[64] = {};
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	223c      	movs	r2, #60	; 0x3c
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f006 f81d 	bl	80066b4 <memset>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 fac1 	bl	8000c00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067e:	f000 fa6b 	bl	8000b58 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000682:	f000 fab5 	bl	8000bf0 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000686:	f000 f99b 	bl	80009c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800068a:	f000 f9d9 	bl	8000a40 <MX_I2C2_Init>
  MX_UART4_Init();
 800068e:	f000 fa17 	bl	8000ac0 <MX_UART4_Init>

  //ssd1306_Init();
  //ssd1306_WriteString(txt1, Font_6x8, White);
  //ssd1306_UpdateScreen();

  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);		// Reset du composant
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <main+0x2d4>)
 800069a:	f001 f975 	bl	8001988 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800069e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a2:	f000 feb9 	bl	8001418 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);		// Reset du composant
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ac:	4885      	ldr	r0, [pc, #532]	; (80008c4 <main+0x2d4>)
 80006ae:	f001 f96b 	bl	8001988 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b6:	f000 feaf 	bl	8001418 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c0:	4880      	ldr	r0, [pc, #512]	; (80008c4 <main+0x2d4>)
 80006c2:	f001 f961 	bl	8001988 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80006c6:	2032      	movs	r0, #50	; 0x32
 80006c8:	f000 fea6 	bl	8001418 <HAL_Delay>


  // POWER UP RADIO
  dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, power_up, 3, -1);
 80006cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2303      	movs	r3, #3
 80006d8:	21c6      	movs	r1, #198	; 0xc6
 80006da:	487b      	ldr	r0, [pc, #492]	; (80008c8 <main+0x2d8>)
 80006dc:	f001 fa18 	bl	8001b10 <HAL_I2C_Master_Transmit>
 80006e0:	4603      	mov	r3, r0
 80006e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  do{
	  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, power_up_res, 1, -1);
 80006e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	21c6      	movs	r1, #198	; 0xc6
 80006f4:	4874      	ldr	r0, [pc, #464]	; (80008c8 <main+0x2d8>)
 80006f6:	f001 faff 	bl	8001cf8 <HAL_I2C_Master_Receive>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f000 fe89 	bl	8001418 <HAL_Delay>
  }while(power_up_res[0]!=0x80);
 8000706:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800070a:	2b80      	cmp	r3, #128	; 0x80
 800070c:	d1eb      	bne.n	80006e6 <main+0xf6>


  // SET TX FREQ
  dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, tuneFreq, 4, -1);
 800070e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2304      	movs	r3, #4
 800071a:	21c6      	movs	r1, #198	; 0xc6
 800071c:	486a      	ldr	r0, [pc, #424]	; (80008c8 <main+0x2d8>)
 800071e:	f001 f9f7 	bl	8001b10 <HAL_I2C_Master_Transmit>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, hal_res, 1, -1);
 8000728:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800072c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	21c6      	movs	r1, #198	; 0xc6
 8000736:	4864      	ldr	r0, [pc, #400]	; (80008c8 <main+0x2d8>)
 8000738:	f001 fade 	bl	8001cf8 <HAL_I2C_Master_Receive>
 800073c:	4603      	mov	r3, r0
 800073e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  HAL_Delay(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f000 fe68 	bl	8001418 <HAL_Delay>

  //GET INT STATUS
  dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, intStatus, 1, -1);
 8000748:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800074c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	21c6      	movs	r1, #198	; 0xc6
 8000756:	485c      	ldr	r0, [pc, #368]	; (80008c8 <main+0x2d8>)
 8000758:	f001 f9da 	bl	8001b10 <HAL_I2C_Master_Transmit>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  do{
	  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, hal_res, 1, -1);
 8000762:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	21c6      	movs	r1, #198	; 0xc6
 8000770:	4855      	ldr	r0, [pc, #340]	; (80008c8 <main+0x2d8>)
 8000772:	f001 fac1 	bl	8001cf8 <HAL_I2C_Master_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  HAL_Delay(10);
 800077c:	200a      	movs	r0, #10
 800077e:	f000 fe4b 	bl	8001418 <HAL_Delay>
    }while(hal_res[0] !=0x81);
 8000782:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000786:	2b81      	cmp	r3, #129	; 0x81
 8000788:	d1eb      	bne.n	8000762 <main+0x172>

  //TX STATUS
  dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, tuneStatus, 2, -1);
 800078a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2302      	movs	r3, #2
 8000796:	21c6      	movs	r1, #198	; 0xc6
 8000798:	484b      	ldr	r0, [pc, #300]	; (80008c8 <main+0x2d8>)
 800079a:	f001 f9b9 	bl	8001b10 <HAL_I2C_Master_Transmit>
 800079e:	4603      	mov	r3, r0
 80007a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, tx_res, 8, -1);
 80007a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2308      	movs	r3, #8
 80007b0:	21c6      	movs	r1, #198	; 0xc6
 80007b2:	4845      	ldr	r0, [pc, #276]	; (80008c8 <main+0x2d8>)
 80007b4:	f001 faa0 	bl	8001cf8 <HAL_I2C_Master_Receive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  //SET TX POWER Problem
  dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, tunePower, 5, -1);
 80007be:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2305      	movs	r3, #5
 80007ca:	21c6      	movs	r1, #198	; 0xc6
 80007cc:	483e      	ldr	r0, [pc, #248]	; (80008c8 <main+0x2d8>)
 80007ce:	f001 f99f 	bl	8001b10 <HAL_I2C_Master_Transmit>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, hal_res, 1, -1);
 80007d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	21c6      	movs	r1, #198	; 0xc6
 80007e6:	4838      	ldr	r0, [pc, #224]	; (80008c8 <main+0x2d8>)
 80007e8:	f001 fa86 	bl	8001cf8 <HAL_I2C_Master_Receive>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fe10 	bl	8001418 <HAL_Delay>

  //GET INT STATUS
  dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, intStatus, 1, -1);
 80007f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	21c6      	movs	r1, #198	; 0xc6
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <main+0x2d8>)
 8000808:	f001 f982 	bl	8001b10 <HAL_I2C_Master_Transmit>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    do{
  	  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, hal_res, 1, -1);
 8000812:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	21c6      	movs	r1, #198	; 0xc6
 8000820:	4829      	ldr	r0, [pc, #164]	; (80008c8 <main+0x2d8>)
 8000822:	f001 fa69 	bl	8001cf8 <HAL_I2C_Master_Receive>
 8000826:	4603      	mov	r3, r0
 8000828:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    	  HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fdf3 	bl	8001418 <HAL_Delay>
      }while(hal_res[0]!=0x81);
 8000832:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000836:	2b81      	cmp	r3, #129	; 0x81
 8000838:	d1eb      	bne.n	8000812 <main+0x222>

    //TX STATUS
    dummy = HAL_I2C_Master_Transmit(&hi2c2, RADIO_ADDRESS, tuneStatus, 2, -1);
 800083a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800083e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2302      	movs	r3, #2
 8000846:	21c6      	movs	r1, #198	; 0xc6
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <main+0x2d8>)
 800084a:	f001 f961 	bl	8001b10 <HAL_I2C_Master_Transmit>
 800084e:	4603      	mov	r3, r0
 8000850:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    do{
      	  dummy = HAL_I2C_Master_Receive(&hi2c2, RADIO_ADDRESS, tx_res, 8, -1);
 8000854:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2308      	movs	r3, #8
 8000860:	21c6      	movs	r1, #198	; 0xc6
 8000862:	4819      	ldr	r0, [pc, #100]	; (80008c8 <main+0x2d8>)
 8000864:	f001 fa48 	bl	8001cf8 <HAL_I2C_Master_Receive>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        	  HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f000 fdd2 	bl	8001418 <HAL_Delay>
          }while(tx_res[0]!=0x80);
 8000874:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000878:	2b80      	cmp	r3, #128	; 0x80
 800087a:	d1eb      	bne.n	8000854 <main+0x264>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800087c:	2101      	movs	r1, #1
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <main+0x2dc>)
 8000880:	f001 f89b 	bl	80019ba <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000888:	f000 fdc6 	bl	8001418 <HAL_Delay>


	  do{
		  gpsData = HAL_UART_Receive(&huart4, gpsDataReceive, 64, 10000);
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000892:	2240      	movs	r2, #64	; 0x40
 8000894:	480e      	ldr	r0, [pc, #56]	; (80008d0 <main+0x2e0>)
 8000896:	f004 fc97 	bl	80051c8 <HAL_UART_Receive>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	  }
	  while(gpsData!=HAL_OK);
 80008a0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f1      	bne.n	800088c <main+0x29c>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008a8:	e7e8      	b.n	800087c <main+0x28c>
 80008aa:	bf00      	nop
 80008ac:	080066dc 	.word	0x080066dc
 80008b0:	080066ec 	.word	0x080066ec
 80008b4:	080066fc 	.word	0x080066fc
 80008b8:	fe290030 	.word	0xfe290030
 80008bc:	08006700 	.word	0x08006700
 80008c0:	08006708 	.word	0x08006708
 80008c4:	58021000 	.word	0x58021000
 80008c8:	24000080 	.word	0x24000080
 80008cc:	58020400 	.word	0x58020400
 80008d0:	240000d4 	.word	0x240000d4

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09c      	sub	sp, #112	; 0x70
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	224c      	movs	r2, #76	; 0x4c
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 fee6 	bl	80066b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2220      	movs	r2, #32
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 fee0 	bl	80066b4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <SystemClock_Config+0xe4>)
 80008f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008fe:	2004      	movs	r0, #4
 8000900:	f001 fe1a 	bl	8002538 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <SystemClock_Config+0xe8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <SystemClock_Config+0xe8>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <SystemClock_Config+0xe8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <SystemClock_Config+0xe8>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000930:	2321      	movs	r3, #33	; 0x21
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000934:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800094a:	2318      	movs	r3, #24
 800094c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000952:	2304      	movs	r3, #4
 8000954:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800095a:	230c      	movs	r3, #12
 800095c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800095e:	2300      	movs	r3, #0
 8000960:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fe3e 	bl	80025ec <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000976:	f000 fa5f 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	233f      	movs	r3, #63	; 0x3f
 800097c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2303      	movs	r3, #3
 8000980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fa56 	bl	8002e50 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xda>
  {
    Error_Handler();
 80009aa:	f000 fa45 	bl	8000e38 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3770      	adds	r7, #112	; 0x70
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58024400 	.word	0x58024400
 80009bc:	58024800 	.word	0x58024800

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009fc:	f000 fff8 	bl	80019f0 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fa17 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a0e:	f001 fcfb 	bl	8002408 <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fa0e 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a20:	f001 fd3d 	bl	800249e <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fa05 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2400002c 	.word	0x2400002c
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	10b0dcfb 	.word	0x10b0dcfb

08000a40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C2_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B0DCFB;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C2_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a7c:	f000 ffb8 	bl	80019f0 <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 f9d7 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a8e:	f001 fcbb 	bl	8002408 <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 f9ce 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000aa0:	f001 fcfd 	bl	800249e <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 f9c5 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000080 	.word	0x24000080
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	10b0dcfb 	.word	0x10b0dcfb

08000ac0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_UART4_Init+0x90>)
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <MX_UART4_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_UART4_Init+0x90>)
 8000acc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_UART4_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_UART4_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_UART4_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_UART4_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_UART4_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_UART4_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_UART4_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_UART4_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_UART4_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_UART4_Init+0x90>)
 8000b0a:	f004 fb0d 	bl	8005128 <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f990 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_UART4_Init+0x90>)
 8000b1c:	f005 fcdb 	bl	80064d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 f987 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <MX_UART4_Init+0x90>)
 8000b2e:	f005 fd10 	bl	8006552 <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f97e 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_UART4_Init+0x90>)
 8000b3e:	f005 fc91 	bl	8006464 <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f976 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	240000d4 	.word	0x240000d4
 8000b54:	40004c00 	.word	0x40004c00

08000b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <MX_USART3_UART_Init+0x94>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f004 fac1 	bl	8005128 <HAL_UART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 f944 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000bb4:	f005 fc8f 	bl	80064d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bbe:	f000 f93b 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4808      	ldr	r0, [pc, #32]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000bc6:	f005 fcc4 	bl	8006552 <HAL_UARTEx_SetRxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f000 f932 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000bd6:	f005 fc45 	bl	8006464 <HAL_UARTEx_DisableFifoMode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f000 f92a 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24000168 	.word	0x24000168
 8000bec:	40004800 	.word	0x40004800

08000bf0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1c:	4a7f      	ldr	r2, [pc, #508]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c26:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	623b      	str	r3, [r7, #32]
 8000c32:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c34:	4b79      	ldr	r3, [pc, #484]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3a:	4a78      	ldr	r2, [pc, #480]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c44:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b72      	ldr	r3, [pc, #456]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c58:	4a70      	ldr	r2, [pc, #448]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c62:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c76:	4a69      	ldr	r2, [pc, #420]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c80:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c94:	4a61      	ldr	r2, [pc, #388]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000ca0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb2:	4a5a      	ldr	r2, [pc, #360]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cbc:	4b57      	ldr	r3, [pc, #348]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	4b54      	ldr	r3, [pc, #336]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000ccc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd0:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cda:	4b50      	ldr	r3, [pc, #320]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cee:	4a4b      	ldr	r2, [pc, #300]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cf8:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <MX_GPIO_Init+0x21c>)
 8000cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0c:	4844      	ldr	r0, [pc, #272]	; (8000e20 <MX_GPIO_Init+0x220>)
 8000d0e:	f000 fe3b 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d18:	4842      	ldr	r0, [pc, #264]	; (8000e24 <MX_GPIO_Init+0x224>)
 8000d1a:	f000 fe35 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RESET_SI4712_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f248 0102 	movw	r1, #32770	; 0x8002
 8000d24:	4840      	ldr	r0, [pc, #256]	; (8000e28 <MX_GPIO_Init+0x228>)
 8000d26:	f000 fe2f 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	483b      	ldr	r0, [pc, #236]	; (8000e2c <MX_GPIO_Init+0x22c>)
 8000d40:	f000 fc72 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4830      	ldr	r0, [pc, #192]	; (8000e20 <MX_GPIO_Init+0x220>)
 8000d5e:	f000 fc63 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d62:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482a      	ldr	r0, [pc, #168]	; (8000e24 <MX_GPIO_Init+0x224>)
 8000d7c:	f000 fc54 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_SI4712_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RESET_SI4712_Pin|LD2_Pin;
 8000d80:	f248 0302 	movw	r3, #32770	; 0x8002
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4823      	ldr	r0, [pc, #140]	; (8000e28 <MX_GPIO_Init+0x228>)
 8000d9a:	f000 fc45 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	481f      	ldr	r0, [pc, #124]	; (8000e30 <MX_GPIO_Init+0x230>)
 8000db4:	f000 fc38 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4819      	ldr	r0, [pc, #100]	; (8000e34 <MX_GPIO_Init+0x234>)
 8000dce:	f000 fc2b 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000de4:	230a      	movs	r3, #10
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_GPIO_Init+0x234>)
 8000df0:	f000 fc1a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000df4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_GPIO_Init+0x234>)
 8000e0e:	f000 fc0b 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58021400 	.word	0x58021400
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58021000 	.word	0x58021000
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58021800 	.word	0x58021800
 8000e34:	58020000 	.word	0x58020000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_MspInit+0x30>)
 8000e4c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x30>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0bc      	sub	sp, #240	; 0xf0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	22c0      	movs	r2, #192	; 0xc0
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f005 fc0b 	bl	80066b4 <memset>
  if(hi2c->Instance==I2C1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <HAL_I2C_MspInit+0x160>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d146      	bne.n	8000f36 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ea8:	f04f 0208 	mov.w	r2, #8
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fb52 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000eca:	f7ff ffb5 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000ed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed4:	4a41      	ldr	r2, [pc, #260]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ede:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000ee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eec:	23c0      	movs	r3, #192	; 0xc0
 8000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f04:	2304      	movs	r3, #4
 8000f06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4833      	ldr	r0, [pc, #204]	; (8000fe0 <HAL_I2C_MspInit+0x168>)
 8000f12:	f000 fb89 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000f18:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f22:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000f28:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f34:	e04b      	b.n	8000fce <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <HAL_I2C_MspInit+0x16c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d146      	bne.n	8000fce <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f40:	f04f 0208 	mov.w	r2, #8
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fb06 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000f62:	f7ff ff69 	bl	8000e38 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_I2C_MspInit+0x168>)
 8000fac:	f000 fb3c 	bl	8001628 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000fb2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fbc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_I2C_MspInit+0x164>)
 8000fc2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
}
 8000fce:	bf00      	nop
 8000fd0:	37f0      	adds	r7, #240	; 0xf0
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	58020400 	.word	0x58020400
 8000fe4:	40005800 	.word	0x40005800

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0bc      	sub	sp, #240	; 0xf0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	22c0      	movs	r2, #192	; 0xc0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fb53 	bl	80066b4 <memset>
  if(huart->Instance==UART4)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_UART_MspInit+0x160>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d147      	bne.n	80010a8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001018:	f04f 0202 	mov.w	r2, #2
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	4618      	mov	r0, r3
 8001030:	f002 fa9a 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800103a:	f7ff fefd 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <HAL_UART_MspInit+0x164>)
 8001040:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001044:	4a41      	ldr	r2, [pc, #260]	; (800114c <HAL_UART_MspInit+0x164>)
 8001046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800104a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800104e:	4b3f      	ldr	r3, [pc, #252]	; (800114c <HAL_UART_MspInit+0x164>)
 8001050:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b3b      	ldr	r3, [pc, #236]	; (800114c <HAL_UART_MspInit+0x164>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001062:	4a3a      	ldr	r2, [pc, #232]	; (800114c <HAL_UART_MspInit+0x164>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_UART_MspInit+0x164>)
 800106e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800107a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800107e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001094:	2308      	movs	r3, #8
 8001096:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800109e:	4619      	mov	r1, r3
 80010a0:	482b      	ldr	r0, [pc, #172]	; (8001150 <HAL_UART_MspInit+0x168>)
 80010a2:	f000 fac1 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a6:	e04b      	b.n	8001140 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_UART_MspInit+0x16c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d146      	bne.n	8001140 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b2:	f04f 0202 	mov.w	r2, #2
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 fa4d 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80010d4:	f7ff feb0 	bl	8000e38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_UART_MspInit+0x164>)
 80010da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010de:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_UART_MspInit+0x164>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_UART_MspInit+0x164>)
 80010ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UART_MspInit+0x164>)
 80010f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_UART_MspInit+0x164>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0x164>)
 8001108:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112e:	2307      	movs	r3, #7
 8001130:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001134:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <HAL_UART_MspInit+0x170>)
 800113c:	f000 fa74 	bl	8001628 <HAL_GPIO_Init>
}
 8001140:	bf00      	nop
 8001142:	37f0      	adds	r7, #240	; 0xf0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004c00 	.word	0x40004c00
 800114c:	58024400 	.word	0x58024400
 8001150:	58020800 	.word	0x58020800
 8001154:	40004800 	.word	0x40004800
 8001158:	58020c00 	.word	0x58020c00

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x4>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f916 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <SystemInit+0xd0>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a31      	ldr	r2, [pc, #196]	; (8001280 <SystemInit+0xd0>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <SystemInit+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d807      	bhi.n	80011e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <SystemInit+0xd4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <SystemInit+0xd4>)
 80011da:	f043 0303 	orr.w	r3, r3, #3
 80011de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <SystemInit+0xd8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a28      	ldr	r2, [pc, #160]	; (8001288 <SystemInit+0xd8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <SystemInit+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <SystemInit+0xd8>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4924      	ldr	r1, [pc, #144]	; (8001288 <SystemInit+0xd8>)
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <SystemInit+0xdc>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <SystemInit+0xd4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <SystemInit+0xd4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <SystemInit+0xd4>)
 8001214:	f043 0303 	orr.w	r3, r3, #3
 8001218:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <SystemInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <SystemInit+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <SystemInit+0xd8>)
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <SystemInit+0xe0>)
 8001230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <SystemInit+0xd8>)
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <SystemInit+0xe4>)
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <SystemInit+0xd8>)
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <SystemInit+0xe8>)
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <SystemInit+0xd8>)
 8001240:	2200      	movs	r2, #0
 8001242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <SystemInit+0xd8>)
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <SystemInit+0xe8>)
 8001248:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <SystemInit+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <SystemInit+0xd8>)
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <SystemInit+0xe8>)
 8001254:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <SystemInit+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <SystemInit+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a09      	ldr	r2, [pc, #36]	; (8001288 <SystemInit+0xd8>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <SystemInit+0xd8>)
 800126a:	2200      	movs	r2, #0
 800126c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SystemInit+0xec>)
 8001270:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001274:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	52002000 	.word	0x52002000
 8001288:	58024400 	.word	0x58024400
 800128c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001290:	02020200 	.word	0x02020200
 8001294:	01ff0000 	.word	0x01ff0000
 8001298:	01010280 	.word	0x01010280
 800129c:	52004000 	.word	0x52004000

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f7ff ff84 	bl	80011b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f005 f9cd 	bl	800666c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f98d 	bl	80005f0 <main>
  bx  lr
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012e4:	08006754 	.word	0x08006754
  ldr r2, =_sbss
 80012e8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012ec:	24000200 	.word	0x24000200

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f962 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001300:	f001 ff5c 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4913      	ldr	r1, [pc, #76]	; (8001360 <HAL_Init+0x6c>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_Init+0x6c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x70>)
 8001336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f814 	bl	800136c <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e002      	b.n	8001354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fd79 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400
 8001360:	0800670c 	.word	0x0800670c
 8001364:	24000004 	.word	0x24000004
 8001368:	24000000 	.word	0x24000000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_InitTick+0x64>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f939 	bl	800160e <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b4:	f000 f911 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x68>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000000 	.word	0x24000000
 80013d4:	24000008 	.word	0x24000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2400000c 	.word	0x2400000c
 80013fc:	240001fc 	.word	0x240001fc

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	240001fc 	.word	0x240001fc

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2400000c 	.word	0x2400000c

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	4313      	orrs	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	05fa0000 	.word	0x05fa0000

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff47 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff5e 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff90 	bl	8001518 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5f 	bl	80014c4 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffb2 	bl	8001580 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <HAL_GPIO_Init+0x234>)
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800163a:	e194      	b.n	8001966 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8186 	beq.w	8001960 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x44>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	69b9      	ldr	r1, [r7, #24]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80e0 	beq.w	8001960 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_GPIO_Init+0x238>)
 80017a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017a6:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <HAL_GPIO_Init+0x238>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_GPIO_Init+0x238>)
 80017b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a29      	ldr	r2, [pc, #164]	; (8001864 <HAL_GPIO_Init+0x23c>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <HAL_GPIO_Init+0x240>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d052      	beq.n	8001890 <HAL_GPIO_Init+0x268>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_GPIO_Init+0x244>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d031      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_GPIO_Init+0x248>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d02b      	beq.n	8001852 <HAL_GPIO_Init+0x22a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_GPIO_Init+0x24c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x226>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_GPIO_Init+0x250>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x222>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_GPIO_Init+0x254>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x21e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_GPIO_Init+0x258>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x21a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_GPIO_Init+0x25c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x216>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_GPIO_Init+0x260>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x212>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_GPIO_Init+0x264>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x20e>
 8001832:	2309      	movs	r3, #9
 8001834:	e02d      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 8001836:	230a      	movs	r3, #10
 8001838:	e02b      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 800183a:	2308      	movs	r3, #8
 800183c:	e029      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 800183e:	2307      	movs	r3, #7
 8001840:	e027      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 8001842:	2306      	movs	r3, #6
 8001844:	e025      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 8001846:	2305      	movs	r3, #5
 8001848:	e023      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 800184a:	2304      	movs	r3, #4
 800184c:	e021      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 800184e:	2303      	movs	r3, #3
 8001850:	e01f      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 8001852:	2302      	movs	r3, #2
 8001854:	e01d      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 8001856:	2301      	movs	r3, #1
 8001858:	e01b      	b.n	8001892 <HAL_GPIO_Init+0x26a>
 800185a:	bf00      	nop
 800185c:	58000080 	.word	0x58000080
 8001860:	58024400 	.word	0x58024400
 8001864:	58000400 	.word	0x58000400
 8001868:	58020000 	.word	0x58020000
 800186c:	58020400 	.word	0x58020400
 8001870:	58020800 	.word	0x58020800
 8001874:	58020c00 	.word	0x58020c00
 8001878:	58021000 	.word	0x58021000
 800187c:	58021400 	.word	0x58021400
 8001880:	58021800 	.word	0x58021800
 8001884:	58021c00 	.word	0x58021c00
 8001888:	58022000 	.word	0x58022000
 800188c:	58022400 	.word	0x58022400
 8001890:	2300      	movs	r3, #0
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a2:	4938      	ldr	r1, [pc, #224]	; (8001984 <HAL_GPIO_Init+0x35c>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	3301      	adds	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f ae63 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	58000400 	.word	0x58000400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	041a      	lsls	r2, r3, #16
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	400b      	ands	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fa2e 	bl	8000e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e006      	b.n	8001a78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d104      	bne.n	8001a8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_I2C_Init+0x11c>)
 8001a96:	430b      	orrs	r3, r1
 8001a98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69d9      	ldr	r1, [r3, #28]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	02008000 	.word	0x02008000

08001b10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	4613      	mov	r3, r2
 8001b22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	f040 80da 	bne.w	8001ce6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2C_Master_Transmit+0x30>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0d3      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff fc5a 	bl	8001400 <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2319      	movs	r3, #25
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f9e6 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0be      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2221      	movs	r2, #33	; 0x21
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2210      	movs	r2, #16
 8001b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	893a      	ldrh	r2, [r7, #8]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d90e      	bls.n	8001bba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fbf6 	bl	80023a4 <I2C_TransferConfig>
 8001bb8:	e06c      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	8979      	ldrh	r1, [r7, #10]
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fbe5 	bl	80023a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bda:	e05b      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	6a39      	ldr	r1, [r7, #32]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f9f2 	bl	8001fca <I2C_WaitOnTXISFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e07b      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d034      	beq.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d130      	bne.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f975 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e04d      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d90e      	bls.n	8001c74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	22ff      	movs	r2, #255	; 0xff
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	8979      	ldrh	r1, [r7, #10]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fb99 	bl	80023a4 <I2C_TransferConfig>
 8001c72:	e00f      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	8979      	ldrh	r1, [r7, #10]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fb88 	bl	80023a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d19e      	bne.n	8001bdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f9d8 	bl	8002058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e01a      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	80002000 	.word	0x80002000
 8001cf4:	fe00e800 	.word	0xfe00e800

08001cf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	460b      	mov	r3, r1
 8001d06:	817b      	strh	r3, [r7, #10]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	f040 80db 	bne.w	8001ed0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_I2C_Master_Receive+0x30>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e0d4      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff fb66 	bl	8001400 <HAL_GetTick>
 8001d34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2319      	movs	r3, #25
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8f2 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0bf      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2222      	movs	r2, #34	; 0x22
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	893a      	ldrh	r2, [r7, #8]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2bff      	cmp	r3, #255	; 0xff
 8001d82:	d90e      	bls.n	8001da2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	8979      	ldrh	r1, [r7, #10]
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_I2C_Master_Receive+0x1e4>)
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fb02 	bl	80023a4 <I2C_TransferConfig>
 8001da0:	e06d      	b.n	8001e7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	8979      	ldrh	r1, [r7, #10]
 8001db4:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_I2C_Master_Receive+0x1e4>)
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 faf1 	bl	80023a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001dc2:	e05c      	b.n	8001e7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	6a39      	ldr	r1, [r7, #32]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f989 	bl	80020e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e07c      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d034      	beq.n	8001e7e <HAL_I2C_Master_Receive+0x186>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d130      	bne.n	8001e7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	2200      	movs	r2, #0
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f880 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e04d      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d90e      	bls.n	8001e5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	22ff      	movs	r2, #255	; 0xff
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	8979      	ldrh	r1, [r7, #10]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 faa4 	bl	80023a4 <I2C_TransferConfig>
 8001e5c:	e00f      	b.n	8001e7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	8979      	ldrh	r1, [r7, #10]
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fa93 	bl	80023a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d19d      	bne.n	8001dc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f8e3 	bl	8002058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e01a      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_I2C_Master_Receive+0x1e8>)
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	80002400 	.word	0x80002400
 8001ee0:	fe00e800 	.word	0xfe00e800

08001ee4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d103      	bne.n	8001f02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d007      	beq.n	8001f20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	619a      	str	r2, [r3, #24]
  }
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f3c:	e031      	b.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f44:	d02d      	beq.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7ff fa5b 	bl	8001400 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d122      	bne.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4013      	ands	r3, r2
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d113      	bne.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4013      	ands	r3, r2
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d0be      	beq.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fd6:	e033      	b.n	8002040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f901 	bl	80021e4 <I2C_IsErrorOccurred>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e031      	b.n	8002050 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff2:	d025      	beq.n	8002040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff4:	f7ff fa04 	bl	8001400 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	429a      	cmp	r2, r3
 8002002:	d302      	bcc.n	800200a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11a      	bne.n	8002040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d013      	beq.n	8002040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e007      	b.n	8002050 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d1c4      	bne.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002064:	e02f      	b.n	80020c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f8ba 	bl	80021e4 <I2C_IsErrorOccurred>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e02d      	b.n	80020d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207a:	f7ff f9c1 	bl	8001400 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	429a      	cmp	r2, r3
 8002088:	d302      	bcc.n	8002090 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d11a      	bne.n	80020c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d013      	beq.n	80020c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e007      	b.n	80020d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d1c8      	bne.n	8002066 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ec:	e06b      	b.n	80021c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f876 	bl	80021e4 <I2C_IsErrorOccurred>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e069      	b.n	80021d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d138      	bne.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d105      	bne.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e055      	b.n	80021d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b10      	cmp	r3, #16
 8002136:	d107      	bne.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2210      	movs	r2, #16
 800213e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2204      	movs	r2, #4
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
 8002146:	e002      	b.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2220      	movs	r2, #32
 8002154:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002162:	400b      	ands	r3, r1
 8002164:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e029      	b.n	80021d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002182:	f7ff f93d 	bl	8001400 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	429a      	cmp	r2, r3
 8002190:	d302      	bcc.n	8002198 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d116      	bne.n	80021c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00f      	beq.n	80021c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e007      	b.n	80021d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d18c      	bne.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	fe00e800 	.word	0xfe00e800

080021e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d068      	beq.n	80022e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2210      	movs	r2, #16
 8002216:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002218:	e049      	b.n	80022ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002220:	d045      	beq.n	80022ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7ff f8ed 	bl	8001400 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_IsErrorOccurred+0x54>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d13a      	bne.n	80022ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800224a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800225a:	d121      	bne.n	80022a0 <I2C_IsErrorOccurred+0xbc>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002262:	d01d      	beq.n	80022a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b20      	cmp	r3, #32
 8002268:	d01a      	beq.n	80022a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002278:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800227a:	f7ff f8c1 	bl	8001400 <HAL_GetTick>
 800227e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002280:	e00e      	b.n	80022a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002282:	f7ff f8bd 	bl	8001400 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b19      	cmp	r3, #25
 800228e:	d907      	bls.n	80022a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	f043 0320 	orr.w	r3, r3, #32
 8002296:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800229e:	e006      	b.n	80022ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d1e9      	bne.n	8002282 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d003      	beq.n	80022c4 <I2C_IsErrorOccurred+0xe0>
 80022bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0aa      	beq.n	800221a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2220      	movs	r2, #32
 80022d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002326:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01c      	beq.n	8002392 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff fdc3 	bl	8001ee4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <I2C_IsErrorOccurred+0x1bc>)
 800236a:	400b      	ands	r3, r1
 800236c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002396:	4618      	mov	r0, r3
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	fe00e800 	.word	0xfe00e800

080023a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	817b      	strh	r3, [r7, #10]
 80023b2:	4613      	mov	r3, r2
 80023b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023bc:	7a7b      	ldrb	r3, [r7, #9]
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	0d5b      	lsrs	r3, r3, #21
 80023de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <I2C_TransferConfig+0x60>)
 80023e4:	430b      	orrs	r3, r1
 80023e6:	43db      	mvns	r3, r3
 80023e8:	ea02 0103 	and.w	r1, r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	03ff63ff 	.word	0x03ff63ff

08002408 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	d138      	bne.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002428:	2302      	movs	r3, #2
 800242a:	e032      	b.n	8002492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800245a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d139      	bne.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024be:	2302      	movs	r3, #2
 80024c0:	e033      	b.n	800252a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2224      	movs	r2, #36	; 0x24
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	2b06      	cmp	r3, #6
 800254a:	d00a      	beq.n	8002562 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e040      	b.n	80025e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e03e      	b.n	80025e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800256a:	491f      	ldr	r1, [pc, #124]	; (80025e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4313      	orrs	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002572:	f7fe ff45 	bl	8001400 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002578:	e009      	b.n	800258e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800257a:	f7fe ff41 	bl	8001400 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002588:	d901      	bls.n	800258e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e028      	b.n	80025e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259a:	d1ee      	bne.n	800257a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b1e      	cmp	r3, #30
 80025a0:	d008      	beq.n	80025b4 <HAL_PWREx_ConfigSupply+0x7c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b2e      	cmp	r3, #46	; 0x2e
 80025a6:	d005      	beq.n	80025b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b1d      	cmp	r3, #29
 80025ac:	d002      	beq.n	80025b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b2d      	cmp	r3, #45	; 0x2d
 80025b2:	d114      	bne.n	80025de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80025b4:	f7fe ff24 	bl	8001400 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025ba:	e009      	b.n	80025d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025bc:	f7fe ff20 	bl	8001400 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ca:	d901      	bls.n	80025d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d1ee      	bne.n	80025bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	58024800 	.word	0x58024800

080025ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f000 bc1f 	b.w	8002e3e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80b3 	beq.w	8002774 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b95      	ldr	r3, [pc, #596]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002618:	4b92      	ldr	r3, [pc, #584]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	2b10      	cmp	r3, #16
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x48>
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	2b18      	cmp	r3, #24
 8002628:	d112      	bne.n	8002650 <HAL_RCC_OscConfig+0x64>
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d10d      	bne.n	8002650 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b8b      	ldr	r3, [pc, #556]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8098 	beq.w	8002772 <HAL_RCC_OscConfig+0x186>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 8093 	bne.w	8002772 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e3f6      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x7c>
 800265a:	4b82      	ldr	r3, [pc, #520]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a81      	ldr	r2, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e058      	b.n	800271a <HAL_RCC_OscConfig+0x12e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d112      	bne.n	8002696 <HAL_RCC_OscConfig+0xaa>
 8002670:	4b7c      	ldr	r3, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7b      	ldr	r2, [pc, #492]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b79      	ldr	r3, [pc, #484]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a78      	ldr	r2, [pc, #480]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b76      	ldr	r3, [pc, #472]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a75      	ldr	r2, [pc, #468]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e041      	b.n	800271a <HAL_RCC_OscConfig+0x12e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269e:	d112      	bne.n	80026c6 <HAL_RCC_OscConfig+0xda>
 80026a0:	4b70      	ldr	r3, [pc, #448]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6f      	ldr	r2, [pc, #444]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b6d      	ldr	r3, [pc, #436]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6c      	ldr	r2, [pc, #432]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e029      	b.n	800271a <HAL_RCC_OscConfig+0x12e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80026ce:	d112      	bne.n	80026f6 <HAL_RCC_OscConfig+0x10a>
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b5e      	ldr	r3, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e011      	b.n	800271a <HAL_RCC_OscConfig+0x12e>
 80026f6:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002714:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002718:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d013      	beq.n	800274a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fe6d 	bl	8001400 <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272a:	f7fe fe69 	bl	8001400 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e380      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800273c:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x13e>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fe59 	bl	8001400 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002752:	f7fe fe55 	bl	8001400 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e36c      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x166>
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002772:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 808c 	beq.w	800289a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800278a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1bc>
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	2b18      	cmp	r3, #24
 800279c:	d137      	bne.n	800280e <HAL_RCC_OscConfig+0x222>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d132      	bne.n	800280e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1d4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e33e      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 0219 	bic.w	r2, r3, #25
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4925      	ldr	r1, [pc, #148]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fe15 	bl	8001400 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fe11 	bl	8001400 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e328      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	4917      	ldr	r1, [pc, #92]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280c:	e045      	b.n	800289a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d028      	beq.n	8002868 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0219 	bic.w	r2, r3, #25
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4910      	ldr	r1, [pc, #64]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fdea 	bl	8001400 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fde6 	bl	8001400 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e2fd      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	4901      	ldr	r1, [pc, #4]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
 8002862:	e01a      	b.n	800289a <HAL_RCC_OscConfig+0x2ae>
 8002864:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002868:	4b97      	ldr	r3, [pc, #604]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a96      	ldr	r2, [pc, #600]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fdc4 	bl	8001400 <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287c:	f7fe fdc0 	bl	8001400 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e2d7      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800288e:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06a      	beq.n	800297c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028b0:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d007      	beq.n	80028cc <HAL_RCC_OscConfig+0x2e0>
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b18      	cmp	r3, #24
 80028c0:	d11b      	bne.n	80028fa <HAL_RCC_OscConfig+0x30e>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d116      	bne.n	80028fa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028cc:	4b7e      	ldr	r3, [pc, #504]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2f8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e2ac      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e4:	4b78      	ldr	r3, [pc, #480]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	4975      	ldr	r1, [pc, #468]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028f8:	e040      	b.n	800297c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d023      	beq.n	800294a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002902:	4b71      	ldr	r3, [pc, #452]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a70      	ldr	r2, [pc, #448]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fd77 	bl	8001400 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002916:	f7fe fd73 	bl	8001400 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e28a      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002928:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002934:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	4961      	ldr	r1, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e018      	b.n	800297c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800294a:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe fd53 	bl	8001400 <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800295e:	f7fe fd4f 	bl	8001400 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e266      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002970:	4b55      	ldr	r3, [pc, #340]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d036      	beq.n	80029f6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d019      	beq.n	80029c4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	4a4c      	ldr	r2, [pc, #304]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fd30 	bl	8001400 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fd2c 	bl	8001400 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e243      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x3b8>
 80029c2:	e018      	b.n	80029f6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	4a3f      	ldr	r2, [pc, #252]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fd16 	bl	8001400 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fd12 	bl	8001400 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e229      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d036      	beq.n	8002a70 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d019      	beq.n	8002a3e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fcf3 	bl	8001400 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1e:	f7fe fcef 	bl	8001400 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e206      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x432>
 8002a3c:	e018      	b.n	8002a70 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fcd9 	bl	8001400 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a52:	f7fe fcd5 	bl	8001400 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1ec      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a64:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80af 	beq.w	8002bdc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_RCC_OscConfig+0x4e0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_RCC_OscConfig+0x4e0>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fcb9 	bl	8001400 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fcb5 	bl	8001400 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1cc      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_OscConfig+0x4e0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4e4>
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a02      	ldr	r2, [pc, #8]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e05b      	b.n	8002b7e <HAL_RCC_OscConfig+0x592>
 8002ac6:	bf00      	nop
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	58024800 	.word	0x58024800
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d112      	bne.n	8002afe <HAL_RCC_OscConfig+0x512>
 8002ad8:	4b9d      	ldr	r3, [pc, #628]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a9c      	ldr	r2, [pc, #624]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	4b9a      	ldr	r3, [pc, #616]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a99      	ldr	r2, [pc, #612]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	4b97      	ldr	r3, [pc, #604]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a96      	ldr	r2, [pc, #600]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	e03f      	b.n	8002b7e <HAL_RCC_OscConfig+0x592>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d112      	bne.n	8002b2c <HAL_RCC_OscConfig+0x540>
 8002b06:	4b92      	ldr	r3, [pc, #584]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a91      	ldr	r2, [pc, #580]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b8f      	ldr	r3, [pc, #572]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a8e      	ldr	r2, [pc, #568]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	4b8c      	ldr	r3, [pc, #560]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a8b      	ldr	r2, [pc, #556]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e028      	b.n	8002b7e <HAL_RCC_OscConfig+0x592>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b85      	cmp	r3, #133	; 0x85
 8002b32:	d112      	bne.n	8002b5a <HAL_RCC_OscConfig+0x56e>
 8002b34:	4b86      	ldr	r3, [pc, #536]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a85      	ldr	r2, [pc, #532]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	4b83      	ldr	r3, [pc, #524]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a82      	ldr	r2, [pc, #520]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b80      	ldr	r3, [pc, #512]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a7f      	ldr	r2, [pc, #508]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x592>
 8002b5a:	4b7d      	ldr	r3, [pc, #500]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a7c      	ldr	r2, [pc, #496]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b7a      	ldr	r3, [pc, #488]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a79      	ldr	r2, [pc, #484]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a76      	ldr	r2, [pc, #472]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fc3b 	bl	8001400 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fc37 	bl	8001400 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e14c      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ee      	beq.n	8002b8e <HAL_RCC_OscConfig+0x5a2>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fc25 	bl	8001400 <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fc21 	bl	8001400 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e136      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd0:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 812b 	beq.w	8002e3c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002be6:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bee:	2b18      	cmp	r3, #24
 8002bf0:	f000 80bb 	beq.w	8002d6a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	f040 8095 	bne.w	8002d28 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a53      	ldr	r2, [pc, #332]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fbf9 	bl	8001400 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe fbf5 	bl	8001400 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e10c      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c24:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c34:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_OscConfig+0x768>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	430a      	orrs	r2, r1
 8002c44:	4942      	ldr	r1, [pc, #264]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	628b      	str	r3, [r1, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	3b01      	subs	r3, #1
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c7a:	4935      	ldr	r1, [pc, #212]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c80:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	4a32      	ldr	r2, [pc, #200]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c98:	00d2      	lsls	r2, r2, #3
 8002c9a:	492d      	ldr	r1, [pc, #180]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f023 020c 	bic.w	r2, r3, #12
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	4928      	ldr	r1, [pc, #160]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f023 0202 	bic.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4924      	ldr	r1, [pc, #144]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fb7e 	bl	8001400 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fb7a 	bl	8001400 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e091      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x71c>
 8002d26:	e089      	b.n	8002e3c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <HAL_RCC_OscConfig+0x764>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fb64 	bl	8001400 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3a:	e00f      	b.n	8002d5c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fb60 	bl	8001400 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d908      	bls.n	8002d5c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e077      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
 8002d4e:	bf00      	nop
 8002d50:	58024400 	.word	0x58024400
 8002d54:	fffffc0c 	.word	0xfffffc0c
 8002d58:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5c:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e9      	bne.n	8002d3c <HAL_RCC_OscConfig+0x750>
 8002d68:	e068      	b.n	8002e3c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d6a:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d70:	4b35      	ldr	r3, [pc, #212]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d031      	beq.n	8002de2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d12a      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d122      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d11a      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	0a5b      	lsrs	r3, r3, #9
 8002db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d111      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d108      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	0e1b      	lsrs	r3, r3, #24
 8002dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e02b      	b.n	8002e3e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	08db      	lsrs	r3, r3, #3
 8002dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d01f      	beq.n	8002e3c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e08:	f7fe fafa 	bl	8001400 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e0e:	bf00      	nop
 8002e10:	f7fe faf6 	bl	8001400 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d0f9      	beq.n	8002e10 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x860>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e28:	00d2      	lsls	r2, r2, #3
 8002e2a:	4907      	ldr	r1, [pc, #28]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_OscConfig+0x85c>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3730      	adds	r7, #48	; 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	ffff0007 	.word	0xffff0007

08002e50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e19c      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b8a      	ldr	r3, [pc, #552]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b87      	ldr	r3, [pc, #540]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4985      	ldr	r1, [pc, #532]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b83      	ldr	r3, [pc, #524]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e184      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d908      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb0:	4b78      	ldr	r3, [pc, #480]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4975      	ldr	r1, [pc, #468]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d908      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	496a      	ldr	r1, [pc, #424]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d908      	bls.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	495e      	ldr	r1, [pc, #376]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d010      	beq.n	8002f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3a:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4953      	ldr	r1, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d908      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f023 020f 	bic.w	r2, r3, #15
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4947      	ldr	r1, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d055      	beq.n	8003032 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4940      	ldr	r1, [pc, #256]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d121      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0f6      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d115      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ea      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0de      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d6      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f023 0207 	bic.w	r2, r3, #7
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4925      	ldr	r1, [pc, #148]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003002:	f7fe f9fd 	bl	8001400 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003008:	e00a      	b.n	8003020 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300a:	f7fe f9f9 	bl	8001400 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0be      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	429a      	cmp	r2, r3
 8003030:	d1eb      	bne.n	800300a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	429a      	cmp	r2, r3
 800304c:	d208      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 800305c:	4313      	orrs	r3, r2
 800305e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d214      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 020f 	bic.w	r2, r3, #15
 8003076:	4906      	ldr	r1, [pc, #24]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e086      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
 8003090:	52002000 	.word	0x52002000
 8003094:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d208      	bcs.n	80030c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030b4:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	4939      	ldr	r1, [pc, #228]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030de:	429a      	cmp	r2, r3
 80030e0:	d208      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	492e      	ldr	r1, [pc, #184]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800310c:	429a      	cmp	r2, r3
 800310e:	d208      	bcs.n	8003122 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003110:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4922      	ldr	r1, [pc, #136]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 800311e:	4313      	orrs	r3, r2
 8003120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800313a:	429a      	cmp	r2, r3
 800313c:	d208      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4917      	ldr	r1, [pc, #92]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 800314c:	4313      	orrs	r3, r2
 800314e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003150:	f000 f834 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	4912      	ldr	r1, [pc, #72]	; (80031ac <HAL_RCC_ClockConfig+0x35c>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_RCC_ClockConfig+0x35c>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_RCC_ClockConfig+0x360>)
 8003186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x364>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x368>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe f8ea 	bl	800136c <HAL_InitTick>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
 80031ac:	0800670c 	.word	0x0800670c
 80031b0:	24000004 	.word	0x24000004
 80031b4:	24000000 	.word	0x24000000
 80031b8:	24000008 	.word	0x24000008

080031bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c2:	4bb3      	ldr	r3, [pc, #716]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ca:	2b18      	cmp	r3, #24
 80031cc:	f200 8155 	bhi.w	800347a <HAL_RCC_GetSysClockFreq+0x2be>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	0800323d 	.word	0x0800323d
 80031dc:	0800347b 	.word	0x0800347b
 80031e0:	0800347b 	.word	0x0800347b
 80031e4:	0800347b 	.word	0x0800347b
 80031e8:	0800347b 	.word	0x0800347b
 80031ec:	0800347b 	.word	0x0800347b
 80031f0:	0800347b 	.word	0x0800347b
 80031f4:	0800347b 	.word	0x0800347b
 80031f8:	08003263 	.word	0x08003263
 80031fc:	0800347b 	.word	0x0800347b
 8003200:	0800347b 	.word	0x0800347b
 8003204:	0800347b 	.word	0x0800347b
 8003208:	0800347b 	.word	0x0800347b
 800320c:	0800347b 	.word	0x0800347b
 8003210:	0800347b 	.word	0x0800347b
 8003214:	0800347b 	.word	0x0800347b
 8003218:	08003269 	.word	0x08003269
 800321c:	0800347b 	.word	0x0800347b
 8003220:	0800347b 	.word	0x0800347b
 8003224:	0800347b 	.word	0x0800347b
 8003228:	0800347b 	.word	0x0800347b
 800322c:	0800347b 	.word	0x0800347b
 8003230:	0800347b 	.word	0x0800347b
 8003234:	0800347b 	.word	0x0800347b
 8003238:	0800326f 	.word	0x0800326f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800323c:	4b94      	ldr	r3, [pc, #592]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003248:	4b91      	ldr	r3, [pc, #580]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	4a90      	ldr	r2, [pc, #576]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800325a:	e111      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800325c:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800325e:	61bb      	str	r3, [r7, #24]
      break;
 8003260:	e10e      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003262:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003264:	61bb      	str	r3, [r7, #24]
      break;
 8003266:	e10b      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003268:	4b8c      	ldr	r3, [pc, #560]	; (800349c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800326a:	61bb      	str	r3, [r7, #24]
      break;
 800326c:	e108      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800326e:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003278:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003282:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003284:	4b82      	ldr	r3, [pc, #520]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800328e:	4b80      	ldr	r3, [pc, #512]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80e1 	beq.w	8003474 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	f000 8083 	beq.w	80033c0 <HAL_RCC_GetSysClockFreq+0x204>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f200 80a1 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x248>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x114>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d056      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032ce:	e099      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d0:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02d      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032dc:	4b6c      	ldr	r3, [pc, #432]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	4a6b      	ldr	r2, [pc, #428]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b62      	ldr	r3, [pc, #392]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a02 	vldr	s12, [r7, #8]
 800331a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003336:	e087      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a02 	vldr	s12, [r7, #8]
 800335e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800337a:	e065      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b40      	ldr	r3, [pc, #256]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033be:	e043      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80033ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d2:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003402:	e021      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003426:	ed97 6a02 	vldr	s12, [r7, #8]
 800342a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003442:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003446:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	0a5b      	lsrs	r3, r3, #9
 800344e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003452:	3301      	adds	r3, #1
 8003454:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003460:	edd7 6a07 	vldr	s13, [r7, #28]
 8003464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346c:	ee17 3a90 	vmov	r3, s15
 8003470:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003472:	e005      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
      break;
 8003478:	e002      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800347c:	61bb      	str	r3, [r7, #24]
      break;
 800347e:	bf00      	nop
  }

  return sysclockfreq;
 8003480:	69bb      	ldr	r3, [r7, #24]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	; 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	58024400 	.word	0x58024400
 8003494:	03d09000 	.word	0x03d09000
 8003498:	003d0900 	.word	0x003d0900
 800349c:	007a1200 	.word	0x007a1200
 80034a0:	46000000 	.word	0x46000000
 80034a4:	4c742400 	.word	0x4c742400
 80034a8:	4a742400 	.word	0x4a742400
 80034ac:	4af42400 	.word	0x4af42400

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80034b6:	f7ff fe81 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCC_GetHCLKFreq+0x50>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	490f      	ldr	r1, [pc, #60]	; (8003504 <HAL_RCC_GetHCLKFreq+0x54>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCC_GetHCLKFreq+0x50>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_GetHCLKFreq+0x54>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <HAL_RCC_GetHCLKFreq+0x58>)
 80034ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_RCC_GetHCLKFreq+0x5c>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <HAL_RCC_GetHCLKFreq+0x58>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	58024400 	.word	0x58024400
 8003504:	0800670c 	.word	0x0800670c
 8003508:	24000004 	.word	0x24000004
 800350c:	24000000 	.word	0x24000000

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003514:	f7ff ffcc 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4904      	ldr	r1, [pc, #16]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58024400 	.word	0x58024400
 8003538:	0800670c 	.word	0x0800670c

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003540:	f7ff ffb6 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4904      	ldr	r1, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	58024400 	.word	0x58024400
 8003564:	0800670c 	.word	0x0800670c

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b0c8      	sub	sp, #288	; 0x120
 800356e:	af00      	add	r7, sp, #0
 8003570:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003574:	2300      	movs	r3, #0
 8003576:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800357a:	2300      	movs	r3, #0
 800357c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800358c:	2500      	movs	r5, #0
 800358e:	ea54 0305 	orrs.w	r3, r4, r5
 8003592:	d049      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800359e:	d02f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035a4:	d828      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035aa:	d01a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b0:	d822      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ba:	d007      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035bc:	e01c      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035be:	4ba7      	ldr	r3, [pc, #668]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	4aa6      	ldr	r2, [pc, #664]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ca:	e01a      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d0:	3308      	adds	r3, #8
 80035d2:	2102      	movs	r1, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fc43 	bl	8004e60 <RCCEx_PLL2_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035e0:	e00f      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e6:	3328      	adds	r3, #40	; 0x28
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 fcea 	bl	8004fc4 <RCCEx_PLL3_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035f6:	e004      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800360a:	4b94      	ldr	r3, [pc, #592]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	4a90      	ldr	r2, [pc, #576]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800361a:	430b      	orrs	r3, r1
 800361c:	6513      	str	r3, [r2, #80]	; 0x50
 800361e:	e003      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003634:	f04f 0900 	mov.w	r9, #0
 8003638:	ea58 0309 	orrs.w	r3, r8, r9
 800363c:	d047      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800363e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	2b04      	cmp	r3, #4
 8003646:	d82a      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003665 	.word	0x08003665
 8003654:	08003673 	.word	0x08003673
 8003658:	08003689 	.word	0x08003689
 800365c:	080036a7 	.word	0x080036a7
 8003660:	080036a7 	.word	0x080036a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003664:	4b7d      	ldr	r3, [pc, #500]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4a7c      	ldr	r2, [pc, #496]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003670:	e01a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003676:	3308      	adds	r3, #8
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fbf0 	bl	8004e60 <RCCEx_PLL2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003686:	e00f      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	3328      	adds	r3, #40	; 0x28
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f001 fc97 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	f023 0107 	bic.w	r1, r3, #7
 80036b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	4a67      	ldr	r2, [pc, #412]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6513      	str	r3, [r2, #80]	; 0x50
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80036ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80036da:	f04f 0b00 	mov.w	fp, #0
 80036de:	ea5a 030b 	orrs.w	r3, sl, fp
 80036e2:	d054      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80036e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036ee:	d036      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80036f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036f4:	d82f      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fa:	d032      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003700:	d829      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003702:	2bc0      	cmp	r3, #192	; 0xc0
 8003704:	d02f      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003706:	2bc0      	cmp	r3, #192	; 0xc0
 8003708:	d825      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d018      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d821      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d007      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800371a:	e01c      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b4f      	ldr	r3, [pc, #316]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4a4e      	ldr	r2, [pc, #312]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003728:	e01e      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800372e:	3308      	adds	r3, #8
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fb94 	bl	8004e60 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800373e:	e013      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003744:	3328      	adds	r3, #40	; 0x28
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fc3b 	bl	8004fc4 <RCCEx_PLL3_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800375c:	e004      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	4a37      	ldr	r2, [pc, #220]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003780:	430b      	orrs	r3, r1
 8003782:	6513      	str	r3, [r2, #80]	; 0x50
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800378a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800379a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d05c      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80037ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80037b8:	d03b      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80037ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80037be:	d834      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c4:	d037      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ca:	d82e      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037d0:	d033      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037d6:	d828      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d01a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d822      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d007      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 80037ee:	e01c      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80037fc:	e01e      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003802:	3308      	adds	r3, #8
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f001 fb2a 	bl	8004e60 <RCCEx_PLL2_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003812:	e013      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003818:	3328      	adds	r3, #40	; 0x28
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fbd1 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003828:	e008      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003830:	e004      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003832:	bf00      	nop
 8003834:	e002      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800383a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003848:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800384c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	4a02      	ldr	r2, [pc, #8]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003854:	430b      	orrs	r3, r1
 8003856:	6513      	str	r3, [r2, #80]	; 0x50
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800385a:	bf00      	nop
 800385c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800387e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	d03a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	2b30      	cmp	r3, #48	; 0x30
 8003890:	d01f      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003892:	2b30      	cmp	r3, #48	; 0x30
 8003894:	d819      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003896:	2b20      	cmp	r3, #32
 8003898:	d00c      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d815      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d019      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d111      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a6:	4bae      	ldr	r3, [pc, #696]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4aad      	ldr	r2, [pc, #692]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80038b2:	e011      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b8:	3308      	adds	r3, #8
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 facf 	bl	8004e60 <RCCEx_PLL2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80038c8:	e006      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038e0:	4b9f      	ldr	r3, [pc, #636]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a9c      	ldr	r2, [pc, #624]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800390a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003914:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003918:	460b      	mov	r3, r1
 800391a:	4313      	orrs	r3, r2
 800391c:	d051      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800391e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003928:	d035      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800392a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392e:	d82e      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003934:	d031      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800393a:	d828      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003940:	d01a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003946:	d822      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d007      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003952:	e01c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a81      	ldr	r2, [pc, #516]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003960:	e01c      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003966:	3308      	adds	r3, #8
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fa78 	bl	8004e60 <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003976:	e011      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397c:	3328      	adds	r3, #40	; 0x28
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f001 fb1f 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800398c:	e006      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800399a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039a4:	4b6e      	ldr	r3, [pc, #440]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80039ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b2:	4a6b      	ldr	r2, [pc, #428]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6513      	str	r3, [r2, #80]	; 0x50
 80039b8:	e003      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80039dc:	460b      	mov	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	d053      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d033      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80039ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f2:	d82c      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80039f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f8:	d02f      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80039fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039fe:	d826      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a04:	d02b      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a0a:	d820      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a10:	d012      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a16:	d81a      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d022      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d115      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a26:	3308      	adds	r3, #8
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 fa18 	bl	8004e60 <RCCEx_PLL2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a36:	e015      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3c:	3328      	adds	r3, #40	; 0x28
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fabf 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a56:	bf00      	nop
 8003a58:	e004      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a6c:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a7a:	4a39      	ldr	r2, [pc, #228]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6513      	str	r3, [r2, #80]	; 0x50
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aa0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	d060      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ab6:	d039      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003ab8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003abc:	d832      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac2:	d035      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac8:	d82c      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d031      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d826      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ada:	d02d      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003adc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ae0:	d820      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae6:	d012      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aec:	d81a      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d024      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af6:	d115      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afc:	3308      	adds	r3, #8
 8003afe:	2101      	movs	r1, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f001 f9ad 	bl	8004e60 <RCCEx_PLL2_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b0c:	e017      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b12:	3328      	adds	r3, #40	; 0x28
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fa54 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b22:	e00c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b2a:	e008      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b2c:	bf00      	nop
 8003b2e:	e006      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b30:	bf00      	nop
 8003b32:	e004      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b34:	bf00      	nop
 8003b36:	e002      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b38:	bf00      	nop
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10e      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b56:	4a02      	ldr	r2, [pc, #8]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b5c:	e006      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003b5e:	bf00      	nop
 8003b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d037      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b96:	d00e      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b9c:	d816      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4bc4      	ldr	r3, [pc, #784]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4ac3      	ldr	r2, [pc, #780]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f94e 	bl	8004e60 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bde:	4bb7      	ldr	r3, [pc, #732]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bec:	4ab3      	ldr	r2, [pc, #716]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6513      	str	r3, [r2, #80]	; 0x50
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d039      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d81c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c69 	.word	0x08003c69
 8003c30:	08003c3d 	.word	0x08003c3d
 8003c34:	08003c4b 	.word	0x08003c4b
 8003c38:	08003c69 	.word	0x08003c69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b9f      	ldr	r3, [pc, #636]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a9e      	ldr	r2, [pc, #632]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c48:	e00f      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	3308      	adds	r3, #8
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f904 	bl	8004e60 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c5e:	e004      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c72:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	f023 0103 	bic.w	r1, r3, #3
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	4a8e      	ldr	r2, [pc, #568]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f000 8099 	beq.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb2:	4b83      	ldr	r3, [pc, #524]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a82      	ldr	r2, [pc, #520]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fb9f 	bl	8001400 <HAL_GetTick>
 8003cc2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fd fb9a 	bl	8001400 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b64      	cmp	r3, #100	; 0x64
 8003cd6:	d903      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cde:	e005      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce0:	4b77      	ldr	r3, [pc, #476]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ed      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003cec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d173      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cf4:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d00:	4053      	eors	r3, r2
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0a:	4b6c      	ldr	r3, [pc, #432]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d16:	4b69      	ldr	r3, [pc, #420]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a68      	ldr	r2, [pc, #416]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d22:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d2e:	4a63      	ldr	r2, [pc, #396]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d118      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fd fb5c 	bl	8001400 <HAL_GetTick>
 8003d48:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d4c:	e00d      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fd fb57 	bl	8001400 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d903      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0eb      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d129      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8e:	d10e      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003d90:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003da0:	091a      	lsrs	r2, r3, #4
 8003da2:	4b48      	ldr	r3, [pc, #288]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	4a45      	ldr	r2, [pc, #276]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6113      	str	r3, [r2, #16]
 8003dac:	e005      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4a42      	ldr	r2, [pc, #264]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003db4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003db8:	6113      	str	r3, [r2, #16]
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003dda:	e003      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003de0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f002 0301 	and.w	r3, r2, #1
 8003df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f000 8090 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	2b28      	cmp	r3, #40	; 0x28
 8003e10:	d870      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003efd 	.word	0x08003efd
 8003e1c:	08003ef5 	.word	0x08003ef5
 8003e20:	08003ef5 	.word	0x08003ef5
 8003e24:	08003ef5 	.word	0x08003ef5
 8003e28:	08003ef5 	.word	0x08003ef5
 8003e2c:	08003ef5 	.word	0x08003ef5
 8003e30:	08003ef5 	.word	0x08003ef5
 8003e34:	08003ef5 	.word	0x08003ef5
 8003e38:	08003ec9 	.word	0x08003ec9
 8003e3c:	08003ef5 	.word	0x08003ef5
 8003e40:	08003ef5 	.word	0x08003ef5
 8003e44:	08003ef5 	.word	0x08003ef5
 8003e48:	08003ef5 	.word	0x08003ef5
 8003e4c:	08003ef5 	.word	0x08003ef5
 8003e50:	08003ef5 	.word	0x08003ef5
 8003e54:	08003ef5 	.word	0x08003ef5
 8003e58:	08003edf 	.word	0x08003edf
 8003e5c:	08003ef5 	.word	0x08003ef5
 8003e60:	08003ef5 	.word	0x08003ef5
 8003e64:	08003ef5 	.word	0x08003ef5
 8003e68:	08003ef5 	.word	0x08003ef5
 8003e6c:	08003ef5 	.word	0x08003ef5
 8003e70:	08003ef5 	.word	0x08003ef5
 8003e74:	08003ef5 	.word	0x08003ef5
 8003e78:	08003efd 	.word	0x08003efd
 8003e7c:	08003ef5 	.word	0x08003ef5
 8003e80:	08003ef5 	.word	0x08003ef5
 8003e84:	08003ef5 	.word	0x08003ef5
 8003e88:	08003ef5 	.word	0x08003ef5
 8003e8c:	08003ef5 	.word	0x08003ef5
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08003ef5 	.word	0x08003ef5
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003ef5 	.word	0x08003ef5
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08003ef5 	.word	0x08003ef5
 8003eac:	08003ef5 	.word	0x08003ef5
 8003eb0:	08003ef5 	.word	0x08003ef5
 8003eb4:	08003ef5 	.word	0x08003ef5
 8003eb8:	08003efd 	.word	0x08003efd
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	58024800 	.word	0x58024800
 8003ec4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	3308      	adds	r3, #8
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ffc5 	bl	8004e60 <RCCEx_PLL2_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003edc:	e00f      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee2:	3328      	adds	r3, #40	; 0x28
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f86c 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f06:	4bc0      	ldr	r3, [pc, #768]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f16:	4abc      	ldr	r2, [pc, #752]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f002 0302 	and.w	r3, r2, #2
 8003f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f3c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d043      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d824      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003f87 	.word	0x08003f87
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fa5 	.word	0x08003fa5
 8003f6c:	08003fa5 	.word	0x08003fa5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f74:	3308      	adds	r3, #8
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 ff71 	bl	8004e60 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f84:	e00f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8a:	3328      	adds	r3, #40	; 0x28
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f818 	bl	8004fc4 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fae:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f023 0107 	bic.w	r1, r3, #7
 8003fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbe:	4a92      	ldr	r2, [pc, #584]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6553      	str	r3, [r2, #84]	; 0x54
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f002 0304 	and.w	r3, r2, #4
 8003fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fe4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d043      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d824      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	0800404d 	.word	0x0800404d
 8004004:	08004019 	.word	0x08004019
 8004008:	0800402f 	.word	0x0800402f
 800400c:	0800404d 	.word	0x0800404d
 8004010:	0800404d 	.word	0x0800404d
 8004014:	0800404d 	.word	0x0800404d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401c:	3308      	adds	r3, #8
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ff1d 	bl	8004e60 <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800402c:	e00f      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004032:	3328      	adds	r3, #40	; 0x28
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f000 ffc4 	bl	8004fc4 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800404c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004056:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	f023 0107 	bic.w	r1, r3, #7
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004066:	4a68      	ldr	r2, [pc, #416]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004072:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f002 0320 	and.w	r3, r2, #32
 8004082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800408c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004090:	460b      	mov	r3, r1
 8004092:	4313      	orrs	r3, r2
 8004094:	d055      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a2:	d033      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80040a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a8:	d82c      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d02f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d826      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040ba:	d02b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80040bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c0:	d820      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c6:	d012      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d81a      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d022      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80040d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d6:	d115      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040dc:	3308      	adds	r3, #8
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 febd 	bl	8004e60 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e015      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	3328      	adds	r3, #40	; 0x28
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 ff64 	bl	8004fc4 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004102:	e00a      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800410c:	bf00      	nop
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004132:	4a35      	ldr	r2, [pc, #212]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6553      	str	r3, [r2, #84]	; 0x54
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800413e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004158:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800415c:	460b      	mov	r3, r1
 800415e:	4313      	orrs	r3, r2
 8004160:	d058      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800416a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800416e:	d033      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004170:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004174:	d82c      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d02f      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004180:	d826      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004182:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004186:	d02b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800418c:	d820      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d012      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004198:	d81a      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d022      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d115      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a8:	3308      	adds	r3, #8
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fe57 	bl	8004e60 <RCCEx_PLL2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041b8:	e015      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041be:	3328      	adds	r3, #40	; 0x28
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fefe 	bl	8004fc4 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041ce:	e00a      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041d6:	e006      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041d8:	bf00      	nop
 80041da:	e004      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041dc:	bf00      	nop
 80041de:	e002      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10e      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041fe:	4a02      	ldr	r2, [pc, #8]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004210:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800422a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d055      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800423c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004240:	d033      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004242:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004246:	d82c      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	d02f      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800424e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004252:	d826      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004254:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004258:	d02b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800425a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800425e:	d820      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004264:	d012      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426a:	d81a      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d022      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d115      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	3308      	adds	r3, #8
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fdee 	bl	8004e60 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800428a:	e015      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	3328      	adds	r3, #40	; 0x28
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fe95 	bl	8004fc4 <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042a0:	e00a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80042b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042c0:	4ba1      	ldr	r3, [pc, #644]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042d0:	4a9d      	ldr	r2, [pc, #628]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042d2:	430b      	orrs	r3, r1
 80042d4:	6593      	str	r3, [r2, #88]	; 0x58
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f002 0308 	and.w	r3, r2, #8
 80042ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d01e      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d10c      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004312:	3328      	adds	r3, #40	; 0x28
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fe54 	bl	8004fc4 <RCCEx_PLL3_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004328:	4b87      	ldr	r3, [pc, #540]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	4a83      	ldr	r2, [pc, #524]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0310 	and.w	r3, r2, #16
 800434a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004354:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d01e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d10c      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	3328      	adds	r3, #40	; 0x28
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fe25 	bl	8004fc4 <RCCEx_PLL3_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800438e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004396:	4a6c      	ldr	r2, [pc, #432]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043b6:	460b      	mov	r3, r1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	d03e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c8:	d022      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80043ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ce:	d81b      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d00b      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80043da:	e015      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e0:	3308      	adds	r3, #8
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd3b 	bl	8004e60 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043f0:	e00f      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f6:	3328      	adds	r3, #40	; 0x28
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fde2 	bl	8004fc4 <RCCEx_PLL3_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004406:	e004      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800440e:	e000      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800441a:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800442a:	4a47      	ldr	r2, [pc, #284]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800442c:	430b      	orrs	r3, r1
 800442e:	6593      	str	r3, [r2, #88]	; 0x58
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004436:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800443a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004446:	67bb      	str	r3, [r7, #120]	; 0x78
 8004448:	2300      	movs	r3, #0
 800444a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800444c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d03b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004462:	d01f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004468:	d818      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446e:	d003      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004474:	d007      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004476:	e011      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004478:	4b33      	ldr	r3, [pc, #204]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a32      	ldr	r2, [pc, #200]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800447e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004484:	e00f      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448a:	3328      	adds	r3, #40	; 0x28
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fd98 	bl	8004fc4 <RCCEx_PLL3_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80044a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6553      	str	r3, [r2, #84]	; 0x54
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80044da:	673b      	str	r3, [r7, #112]	; 0x70
 80044dc:	2300      	movs	r3, #0
 80044de:	677b      	str	r3, [r7, #116]	; 0x74
 80044e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80044e4:	460b      	mov	r3, r1
 80044e6:	4313      	orrs	r3, r2
 80044e8:	d034      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d007      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004508:	e00e      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800450a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450e:	3308      	adds	r3, #8
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fca4 	bl	8004e60 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800451e:	e003      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004528:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	4a02      	ldr	r2, [pc, #8]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004540:	430b      	orrs	r3, r1
 8004542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004550:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004560:	66bb      	str	r3, [r7, #104]	; 0x68
 8004562:	2300      	movs	r3, #0
 8004564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004566:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800456a:	460b      	mov	r3, r1
 800456c:	4313      	orrs	r3, r2
 800456e:	d00c      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004574:	3328      	adds	r3, #40	; 0x28
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd23 	bl	8004fc4 <RCCEx_PLL3_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004596:	663b      	str	r3, [r7, #96]	; 0x60
 8004598:	2300      	movs	r3, #0
 800459a:	667b      	str	r3, [r7, #100]	; 0x64
 800459c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d038      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b2:	d018      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80045b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b8:	d811      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80045ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045be:	d014      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	d80b      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d106      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4bc3      	ldr	r3, [pc, #780]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4ac2      	ldr	r2, [pc, #776]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045dc:	e008      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045e4:	e004      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80045ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045f8:	4bb9      	ldr	r3, [pc, #740]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	4ab5      	ldr	r2, [pc, #724]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6553      	str	r3, [r2, #84]	; 0x54
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004614:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004624:	65bb      	str	r3, [r7, #88]	; 0x58
 8004626:	2300      	movs	r3, #0
 8004628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004634:	4baa      	ldr	r3, [pc, #680]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004642:	4aa7      	ldr	r2, [pc, #668]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004654:	653b      	str	r3, [r7, #80]	; 0x50
 8004656:	2300      	movs	r3, #0
 8004658:	657b      	str	r3, [r7, #84]	; 0x54
 800465a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004664:	4b9e      	ldr	r3, [pc, #632]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800466c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a9b      	ldr	r2, [pc, #620]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
 8004686:	2300      	movs	r3, #0
 8004688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004694:	4b92      	ldr	r3, [pc, #584]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800469c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a2:	4a8f      	ldr	r2, [pc, #572]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
 80046b6:	2300      	movs	r3, #0
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046c4:	4b86      	ldr	r3, [pc, #536]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	4a85      	ldr	r2, [pc, #532]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ce:	6113      	str	r3, [r2, #16]
 80046d0:	4b83      	ldr	r3, [pc, #524]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046d2:	6919      	ldr	r1, [r3, #16]
 80046d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046dc:	4a80      	ldr	r2, [pc, #512]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046de:	430b      	orrs	r3, r1
 80046e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80046f0:	2300      	movs	r3, #0
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046fe:	4b78      	ldr	r3, [pc, #480]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	4a74      	ldr	r2, [pc, #464]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800470e:	430b      	orrs	r3, r1
 8004710:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
 8004720:	2300      	movs	r3, #0
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
 8004724:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800472e:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473e:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004740:	430b      	orrs	r3, r1
 8004742:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	2100      	movs	r1, #0
 800474e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004756:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800475a:	460b      	mov	r3, r1
 800475c:	4313      	orrs	r3, r2
 800475e:	d011      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	3308      	adds	r3, #8
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fb79 	bl	8004e60 <RCCEx_PLL2_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004780:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	2100      	movs	r1, #0
 800478e:	6239      	str	r1, [r7, #32]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	d011      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a4:	3308      	adds	r3, #8
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fb59 	bl	8004e60 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	2100      	movs	r1, #0
 80047ce:	61b9      	str	r1, [r7, #24]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	d011      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	3308      	adds	r3, #8
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fb39 	bl	8004e60 <RCCEx_PLL2_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004800:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	2100      	movs	r1, #0
 800480e:	6139      	str	r1, [r7, #16]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d011      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	3328      	adds	r3, #40	; 0x28
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fbcb 	bl	8004fc4 <RCCEx_PLL3_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004840:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	2100      	movs	r1, #0
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d011      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004864:	3328      	adds	r3, #40	; 0x28
 8004866:	2101      	movs	r1, #1
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fbab 	bl	8004fc4 <RCCEx_PLL3_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004880:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	2100      	movs	r1, #0
 800488e:	6039      	str	r1, [r7, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	e9d7 1200 	ldrd	r1, r2, [r7]
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d011      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a4:	3328      	adds	r3, #40	; 0x28
 80048a6:	2102      	movs	r1, #2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fb8b 	bl	8004fc4 <RCCEx_PLL3_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80048b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80048c4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80048d8:	46bd      	mov	sp, r7
 80048da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048de:	bf00      	nop
 80048e0:	58024400 	.word	0x58024400

080048e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80048e8:	f7fe fde2 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	; (800490c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58024400 	.word	0x58024400
 800490c:	0800670c 	.word	0x0800670c

08004910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004918:	4ba1      	ldr	r3, [pc, #644]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004922:	4b9f      	ldr	r3, [pc, #636]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	0b1b      	lsrs	r3, r3, #12
 8004928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800492e:	4b9c      	ldr	r3, [pc, #624]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800493a:	4b99      	ldr	r3, [pc, #612]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	08db      	lsrs	r3, r3, #3
 8004940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8111 	beq.w	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	f000 8083 	beq.w	8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b02      	cmp	r3, #2
 800496a:	f200 80a1 	bhi.w	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d056      	beq.n	8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800497a:	e099      	b.n	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800497c:	4b88      	ldr	r3, [pc, #544]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d02d      	beq.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004988:	4b85      	ldr	r3, [pc, #532]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	08db      	lsrs	r3, r3, #3
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	4a84      	ldr	r2, [pc, #528]	; (8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
 8004998:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b2:	4b7b      	ldr	r3, [pc, #492]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049e2:	e087      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f6:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a26:	e065      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b59      	ldr	r3, [pc, #356]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a6a:	e043      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b48      	ldr	r3, [pc, #288]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aae:	e021      	b.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b37      	ldr	r3, [pc, #220]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004af4:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	0a5b      	lsrs	r3, r3, #9
 8004afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1a:	ee17 2a90 	vmov	r2, s15
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b22:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b48:	ee17 2a90 	vmov	r2, s15
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b76:	ee17 2a90 	vmov	r2, s15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
}
 8004b92:	bf00      	nop
 8004b94:	3724      	adds	r7, #36	; 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	03d09000 	.word	0x03d09000
 8004ba8:	46000000 	.word	0x46000000
 8004bac:	4c742400 	.word	0x4c742400
 8004bb0:	4a742400 	.word	0x4a742400
 8004bb4:	4af42400 	.word	0x4af42400

08004bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	; 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bc0:	4ba1      	ldr	r3, [pc, #644]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bca:	4b9f      	ldr	r3, [pc, #636]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	0d1b      	lsrs	r3, r3, #20
 8004bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bd6:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004be2:	4b99      	ldr	r3, [pc, #612]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8111 	beq.w	8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f000 8083 	beq.w	8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f200 80a1 	bhi.w	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d056      	beq.n	8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c22:	e099      	b.n	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c24:	4b88      	ldr	r3, [pc, #544]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02d      	beq.n	8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c30:	4b85      	ldr	r3, [pc, #532]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a84      	ldr	r2, [pc, #528]	; (8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c8a:	e087      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cce:	e065      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d12:	e043      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	e021      	b.n	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d9c:	4b2a      	ldr	r3, [pc, #168]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	ee17 2a90 	vmov	r2, s15
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004df8:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1e:	ee17 2a90 	vmov	r2, s15
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e26:	e008      	b.n	8004e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	3724      	adds	r7, #36	; 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	03d09000 	.word	0x03d09000
 8004e50:	46000000 	.word	0x46000000
 8004e54:	4c742400 	.word	0x4c742400
 8004e58:	4a742400 	.word	0x4a742400
 8004e5c:	4af42400 	.word	0x4af42400

08004e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d101      	bne.n	8004e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e099      	b.n	8004fb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e7e:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a4e      	ldr	r2, [pc, #312]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fab9 	bl	8001400 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e92:	f7fc fab5 	bl	8001400 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e086      	b.n	8004fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ea4:	4b45      	ldr	r3, [pc, #276]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004eb0:	4b42      	ldr	r3, [pc, #264]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	493f      	ldr	r1, [pc, #252]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	025b      	lsls	r3, r3, #9
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ef4:	4931      	ldr	r1, [pc, #196]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004efa:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	492d      	ldr	r1, [pc, #180]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f023 0220 	bic.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	4928      	ldr	r1, [pc, #160]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f24:	f023 0310 	bic.w	r3, r3, #16
 8004f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <RCCEx_PLL2_Config+0x160>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	69d2      	ldr	r2, [r2, #28]
 8004f36:	00d2      	lsls	r2, r2, #3
 8004f38:	4920      	ldr	r1, [pc, #128]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f44:	f043 0310 	orr.w	r3, r3, #16
 8004f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f5c:	e00f      	b.n	8004f7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d106      	bne.n	8004f72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f70:	e005      	b.n	8004f7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc fa39 	bl	8001400 <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f92:	f7fc fa35 	bl	8001400 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	ffff0007 	.word	0xffff0007

08004fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fd2:	4b53      	ldr	r3, [pc, #332]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d101      	bne.n	8004fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e099      	b.n	8005116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fe2:	4b4f      	ldr	r3, [pc, #316]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4e      	ldr	r2, [pc, #312]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fee:	f7fc fa07 	bl	8001400 <HAL_GetTick>
 8004ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ff6:	f7fc fa03 	bl	8001400 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e086      	b.n	8005116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005008:	4b45      	ldr	r3, [pc, #276]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005014:	4b42      	ldr	r3, [pc, #264]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	051b      	lsls	r3, r3, #20
 8005022:	493f      	ldr	r1, [pc, #252]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	628b      	str	r3, [r1, #40]	; 0x28
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	3b01      	subs	r3, #1
 800502e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	3b01      	subs	r3, #1
 8005038:	025b      	lsls	r3, r3, #9
 800503a:	b29b      	uxth	r3, r3
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	3b01      	subs	r3, #1
 8005052:	061b      	lsls	r3, r3, #24
 8005054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005058:	4931      	ldr	r1, [pc, #196]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 800505a:	4313      	orrs	r3, r2
 800505c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800505e:	4b30      	ldr	r3, [pc, #192]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	492d      	ldr	r1, [pc, #180]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005070:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	4928      	ldr	r1, [pc, #160]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005082:	4b27      	ldr	r3, [pc, #156]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4a26      	ldr	r2, [pc, #152]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 8005090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <RCCEx_PLL3_Config+0x160>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	69d2      	ldr	r2, [r2, #28]
 800509a:	00d2      	lsls	r2, r2, #3
 800509c:	4920      	ldr	r1, [pc, #128]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050a2:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4a19      	ldr	r2, [pc, #100]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050c0:	e00f      	b.n	80050e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050c8:	4b15      	ldr	r3, [pc, #84]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050d4:	e005      	b.n	80050e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4a11      	ldr	r2, [pc, #68]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fc f987 	bl	8001400 <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050f4:	e008      	b.n	8005108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050f6:	f7fc f983 	bl	8001400 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <RCCEx_PLL3_Config+0x15c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	ffff0007 	.word	0xffff0007

08005128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e042      	b.n	80051c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7fb ff4b 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	; 0x24
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f8f4 	bl	8005358 <UART_SetConfig>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e022      	b.n	80051c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 ff54 	bl	8006030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 ffdb 	bl	8006174 <UART_CheckIdleState>
 80051be:	4603      	mov	r3, r0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051de:	2b20      	cmp	r3, #32
 80051e0:	f040 80b5 	bne.w	800534e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Receive+0x28>
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0ad      	b.n	8005350 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2222      	movs	r2, #34	; 0x22
 8005200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800520a:	f7fc f8f9 	bl	8001400 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	d10e      	bne.n	8005248 <HAL_UART_Receive+0x80>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d105      	bne.n	800523e <HAL_UART_Receive+0x76>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800523c:	e02d      	b.n	800529a <HAL_UART_Receive+0xd2>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	22ff      	movs	r2, #255	; 0xff
 8005242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005246:	e028      	b.n	800529a <HAL_UART_Receive+0xd2>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10d      	bne.n	800526c <HAL_UART_Receive+0xa4>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_UART_Receive+0x9a>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	22ff      	movs	r2, #255	; 0xff
 800525c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005260:	e01b      	b.n	800529a <HAL_UART_Receive+0xd2>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	227f      	movs	r2, #127	; 0x7f
 8005266:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800526a:	e016      	b.n	800529a <HAL_UART_Receive+0xd2>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005274:	d10d      	bne.n	8005292 <HAL_UART_Receive+0xca>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_UART_Receive+0xc0>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	227f      	movs	r2, #127	; 0x7f
 8005282:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005286:	e008      	b.n	800529a <HAL_UART_Receive+0xd2>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	223f      	movs	r2, #63	; 0x3f
 800528c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005290:	e003      	b.n	800529a <HAL_UART_Receive+0xd2>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80052a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d108      	bne.n	80052be <HAL_UART_Receive+0xf6>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e003      	b.n	80052c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052c6:	e036      	b.n	8005336 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2120      	movs	r1, #32
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fff8 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e032      	b.n	8005350 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10c      	bne.n	800530a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	8a7b      	ldrh	r3, [r7, #18]
 80052fa:	4013      	ands	r3, r2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	3302      	adds	r3, #2
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e00c      	b.n	8005324 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	b2da      	uxtb	r2, r3
 8005312:	8a7b      	ldrh	r3, [r7, #18]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	4013      	ands	r3, r2
 8005318:	b2da      	uxtb	r2, r3
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3301      	adds	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1c2      	bne.n	80052c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800535c:	b092      	sub	sp, #72	; 0x48
 800535e:	af00      	add	r7, sp, #0
 8005360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	431a      	orrs	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	431a      	orrs	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	4313      	orrs	r3, r2
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4bbe      	ldr	r3, [pc, #760]	; (8005680 <UART_SetConfig+0x328>)
 8005388:	4013      	ands	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005390:	430b      	orrs	r3, r1
 8005392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4ab3      	ldr	r2, [pc, #716]	; (8005684 <UART_SetConfig+0x32c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c0:	4313      	orrs	r3, r2
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	4baf      	ldr	r3, [pc, #700]	; (8005688 <UART_SetConfig+0x330>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f023 010f 	bic.w	r1, r3, #15
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4aa6      	ldr	r2, [pc, #664]	; (800568c <UART_SetConfig+0x334>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d177      	bne.n	80054e8 <UART_SetConfig+0x190>
 80053f8:	4ba5      	ldr	r3, [pc, #660]	; (8005690 <UART_SetConfig+0x338>)
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005400:	2b28      	cmp	r3, #40	; 0x28
 8005402:	d86d      	bhi.n	80054e0 <UART_SetConfig+0x188>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <UART_SetConfig+0xb4>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	080054b1 	.word	0x080054b1
 8005410:	080054e1 	.word	0x080054e1
 8005414:	080054e1 	.word	0x080054e1
 8005418:	080054e1 	.word	0x080054e1
 800541c:	080054e1 	.word	0x080054e1
 8005420:	080054e1 	.word	0x080054e1
 8005424:	080054e1 	.word	0x080054e1
 8005428:	080054e1 	.word	0x080054e1
 800542c:	080054b9 	.word	0x080054b9
 8005430:	080054e1 	.word	0x080054e1
 8005434:	080054e1 	.word	0x080054e1
 8005438:	080054e1 	.word	0x080054e1
 800543c:	080054e1 	.word	0x080054e1
 8005440:	080054e1 	.word	0x080054e1
 8005444:	080054e1 	.word	0x080054e1
 8005448:	080054e1 	.word	0x080054e1
 800544c:	080054c1 	.word	0x080054c1
 8005450:	080054e1 	.word	0x080054e1
 8005454:	080054e1 	.word	0x080054e1
 8005458:	080054e1 	.word	0x080054e1
 800545c:	080054e1 	.word	0x080054e1
 8005460:	080054e1 	.word	0x080054e1
 8005464:	080054e1 	.word	0x080054e1
 8005468:	080054e1 	.word	0x080054e1
 800546c:	080054c9 	.word	0x080054c9
 8005470:	080054e1 	.word	0x080054e1
 8005474:	080054e1 	.word	0x080054e1
 8005478:	080054e1 	.word	0x080054e1
 800547c:	080054e1 	.word	0x080054e1
 8005480:	080054e1 	.word	0x080054e1
 8005484:	080054e1 	.word	0x080054e1
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054d1 	.word	0x080054d1
 8005490:	080054e1 	.word	0x080054e1
 8005494:	080054e1 	.word	0x080054e1
 8005498:	080054e1 	.word	0x080054e1
 800549c:	080054e1 	.word	0x080054e1
 80054a0:	080054e1 	.word	0x080054e1
 80054a4:	080054e1 	.word	0x080054e1
 80054a8:	080054e1 	.word	0x080054e1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e326      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054b8:	2304      	movs	r3, #4
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e322      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054c0:	2308      	movs	r3, #8
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e31e      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054c8:	2310      	movs	r3, #16
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e31a      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054d0:	2320      	movs	r3, #32
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e316      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054d8:	2340      	movs	r3, #64	; 0x40
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e312      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e30e      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a69      	ldr	r2, [pc, #420]	; (8005694 <UART_SetConfig+0x33c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d130      	bne.n	8005554 <UART_SetConfig+0x1fc>
 80054f2:	4b67      	ldr	r3, [pc, #412]	; (8005690 <UART_SetConfig+0x338>)
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d826      	bhi.n	800554c <UART_SetConfig+0x1f4>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x1ac>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	0800551d 	.word	0x0800551d
 8005508:	08005525 	.word	0x08005525
 800550c:	0800552d 	.word	0x0800552d
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e2f0      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e2ec      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e2e8      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e2e4      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800553c:	2320      	movs	r3, #32
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e2e0      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e2dc      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e2d8      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a4f      	ldr	r2, [pc, #316]	; (8005698 <UART_SetConfig+0x340>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d130      	bne.n	80055c0 <UART_SetConfig+0x268>
 800555e:	4b4c      	ldr	r3, [pc, #304]	; (8005690 <UART_SetConfig+0x338>)
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b05      	cmp	r3, #5
 8005568:	d826      	bhi.n	80055b8 <UART_SetConfig+0x260>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x218>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005589 	.word	0x08005589
 8005574:	08005591 	.word	0x08005591
 8005578:	08005599 	.word	0x08005599
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055b1 	.word	0x080055b1
 8005588:	2300      	movs	r3, #0
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e2ba      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e2b6      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e2b2      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e2ae      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80055a8:	2320      	movs	r3, #32
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e2aa      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80055b0:	2340      	movs	r3, #64	; 0x40
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e2a6      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e2a2      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a35      	ldr	r2, [pc, #212]	; (800569c <UART_SetConfig+0x344>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d130      	bne.n	800562c <UART_SetConfig+0x2d4>
 80055ca:	4b31      	ldr	r3, [pc, #196]	; (8005690 <UART_SetConfig+0x338>)
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d826      	bhi.n	8005624 <UART_SetConfig+0x2cc>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x284>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	08005605 	.word	0x08005605
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005615 	.word	0x08005615
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e284      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e280      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e27c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e278      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005614:	2320      	movs	r3, #32
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e274      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e270      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e26c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <UART_SetConfig+0x348>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d142      	bne.n	80056bc <UART_SetConfig+0x364>
 8005636:	4b16      	ldr	r3, [pc, #88]	; (8005690 <UART_SetConfig+0x338>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b05      	cmp	r3, #5
 8005640:	d838      	bhi.n	80056b4 <UART_SetConfig+0x35c>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x2f0>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005661 	.word	0x08005661
 800564c:	08005669 	.word	0x08005669
 8005650:	08005671 	.word	0x08005671
 8005654:	08005679 	.word	0x08005679
 8005658:	080056a5 	.word	0x080056a5
 800565c:	080056ad 	.word	0x080056ad
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e24e      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e24a      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e246      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e242      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005680:	cfff69f3 	.word	0xcfff69f3
 8005684:	58000c00 	.word	0x58000c00
 8005688:	11fff4ff 	.word	0x11fff4ff
 800568c:	40011000 	.word	0x40011000
 8005690:	58024400 	.word	0x58024400
 8005694:	40004400 	.word	0x40004400
 8005698:	40004800 	.word	0x40004800
 800569c:	40004c00 	.word	0x40004c00
 80056a0:	40005000 	.word	0x40005000
 80056a4:	2320      	movs	r3, #32
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056aa:	e22c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80056ac:	2340      	movs	r3, #64	; 0x40
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e228      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e224      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4ab1      	ldr	r2, [pc, #708]	; (8005988 <UART_SetConfig+0x630>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d176      	bne.n	80057b4 <UART_SetConfig+0x45c>
 80056c6:	4bb1      	ldr	r3, [pc, #708]	; (800598c <UART_SetConfig+0x634>)
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ce:	2b28      	cmp	r3, #40	; 0x28
 80056d0:	d86c      	bhi.n	80057ac <UART_SetConfig+0x454>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <UART_SetConfig+0x380>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	0800577d 	.word	0x0800577d
 80056dc:	080057ad 	.word	0x080057ad
 80056e0:	080057ad 	.word	0x080057ad
 80056e4:	080057ad 	.word	0x080057ad
 80056e8:	080057ad 	.word	0x080057ad
 80056ec:	080057ad 	.word	0x080057ad
 80056f0:	080057ad 	.word	0x080057ad
 80056f4:	080057ad 	.word	0x080057ad
 80056f8:	08005785 	.word	0x08005785
 80056fc:	080057ad 	.word	0x080057ad
 8005700:	080057ad 	.word	0x080057ad
 8005704:	080057ad 	.word	0x080057ad
 8005708:	080057ad 	.word	0x080057ad
 800570c:	080057ad 	.word	0x080057ad
 8005710:	080057ad 	.word	0x080057ad
 8005714:	080057ad 	.word	0x080057ad
 8005718:	0800578d 	.word	0x0800578d
 800571c:	080057ad 	.word	0x080057ad
 8005720:	080057ad 	.word	0x080057ad
 8005724:	080057ad 	.word	0x080057ad
 8005728:	080057ad 	.word	0x080057ad
 800572c:	080057ad 	.word	0x080057ad
 8005730:	080057ad 	.word	0x080057ad
 8005734:	080057ad 	.word	0x080057ad
 8005738:	08005795 	.word	0x08005795
 800573c:	080057ad 	.word	0x080057ad
 8005740:	080057ad 	.word	0x080057ad
 8005744:	080057ad 	.word	0x080057ad
 8005748:	080057ad 	.word	0x080057ad
 800574c:	080057ad 	.word	0x080057ad
 8005750:	080057ad 	.word	0x080057ad
 8005754:	080057ad 	.word	0x080057ad
 8005758:	0800579d 	.word	0x0800579d
 800575c:	080057ad 	.word	0x080057ad
 8005760:	080057ad 	.word	0x080057ad
 8005764:	080057ad 	.word	0x080057ad
 8005768:	080057ad 	.word	0x080057ad
 800576c:	080057ad 	.word	0x080057ad
 8005770:	080057ad 	.word	0x080057ad
 8005774:	080057ad 	.word	0x080057ad
 8005778:	080057a5 	.word	0x080057a5
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e1c0      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005784:	2304      	movs	r3, #4
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e1bc      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800578c:	2308      	movs	r3, #8
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e1b8      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005794:	2310      	movs	r3, #16
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e1b4      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800579c:	2320      	movs	r3, #32
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e1b0      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e1ac      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e1a8      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a75      	ldr	r2, [pc, #468]	; (8005990 <UART_SetConfig+0x638>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d130      	bne.n	8005820 <UART_SetConfig+0x4c8>
 80057be:	4b73      	ldr	r3, [pc, #460]	; (800598c <UART_SetConfig+0x634>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d826      	bhi.n	8005818 <UART_SetConfig+0x4c0>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x478>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e9 	.word	0x080057e9
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	080057f9 	.word	0x080057f9
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005811 	.word	0x08005811
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e18a      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e186      	b.n	8005b06 <UART_SetConfig+0x7ae>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e182      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e17e      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005808:	2320      	movs	r3, #32
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e17a      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e176      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e172      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <UART_SetConfig+0x63c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d130      	bne.n	800588c <UART_SetConfig+0x534>
 800582a:	4b58      	ldr	r3, [pc, #352]	; (800598c <UART_SetConfig+0x634>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b05      	cmp	r3, #5
 8005834:	d826      	bhi.n	8005884 <UART_SetConfig+0x52c>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x4e4>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005855 	.word	0x08005855
 8005840:	0800585d 	.word	0x0800585d
 8005844:	08005865 	.word	0x08005865
 8005848:	0800586d 	.word	0x0800586d
 800584c:	08005875 	.word	0x08005875
 8005850:	0800587d 	.word	0x0800587d
 8005854:	2300      	movs	r3, #0
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e154      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e150      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e14c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e148      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005874:	2320      	movs	r3, #32
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e144      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e140      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e13c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a41      	ldr	r2, [pc, #260]	; (8005998 <UART_SetConfig+0x640>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f040 8082 	bne.w	800599c <UART_SetConfig+0x644>
 8005898:	4b3c      	ldr	r3, [pc, #240]	; (800598c <UART_SetConfig+0x634>)
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a0:	2b28      	cmp	r3, #40	; 0x28
 80058a2:	d86d      	bhi.n	8005980 <UART_SetConfig+0x628>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x554>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	08005951 	.word	0x08005951
 80058b0:	08005981 	.word	0x08005981
 80058b4:	08005981 	.word	0x08005981
 80058b8:	08005981 	.word	0x08005981
 80058bc:	08005981 	.word	0x08005981
 80058c0:	08005981 	.word	0x08005981
 80058c4:	08005981 	.word	0x08005981
 80058c8:	08005981 	.word	0x08005981
 80058cc:	08005959 	.word	0x08005959
 80058d0:	08005981 	.word	0x08005981
 80058d4:	08005981 	.word	0x08005981
 80058d8:	08005981 	.word	0x08005981
 80058dc:	08005981 	.word	0x08005981
 80058e0:	08005981 	.word	0x08005981
 80058e4:	08005981 	.word	0x08005981
 80058e8:	08005981 	.word	0x08005981
 80058ec:	08005961 	.word	0x08005961
 80058f0:	08005981 	.word	0x08005981
 80058f4:	08005981 	.word	0x08005981
 80058f8:	08005981 	.word	0x08005981
 80058fc:	08005981 	.word	0x08005981
 8005900:	08005981 	.word	0x08005981
 8005904:	08005981 	.word	0x08005981
 8005908:	08005981 	.word	0x08005981
 800590c:	08005969 	.word	0x08005969
 8005910:	08005981 	.word	0x08005981
 8005914:	08005981 	.word	0x08005981
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	08005981 	.word	0x08005981
 8005928:	08005981 	.word	0x08005981
 800592c:	08005971 	.word	0x08005971
 8005930:	08005981 	.word	0x08005981
 8005934:	08005981 	.word	0x08005981
 8005938:	08005981 	.word	0x08005981
 800593c:	08005981 	.word	0x08005981
 8005940:	08005981 	.word	0x08005981
 8005944:	08005981 	.word	0x08005981
 8005948:	08005981 	.word	0x08005981
 800594c:	08005979 	.word	0x08005979
 8005950:	2301      	movs	r3, #1
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005956:	e0d6      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595e:	e0d2      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005966:	e0ce      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596e:	e0ca      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005970:	2320      	movs	r3, #32
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005976:	e0c6      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597e:	e0c2      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005986:	e0be      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005988:	40011400 	.word	0x40011400
 800598c:	58024400 	.word	0x58024400
 8005990:	40007800 	.word	0x40007800
 8005994:	40007c00 	.word	0x40007c00
 8005998:	40011800 	.word	0x40011800
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4aad      	ldr	r2, [pc, #692]	; (8005c58 <UART_SetConfig+0x900>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d176      	bne.n	8005a94 <UART_SetConfig+0x73c>
 80059a6:	4bad      	ldr	r3, [pc, #692]	; (8005c5c <UART_SetConfig+0x904>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ae:	2b28      	cmp	r3, #40	; 0x28
 80059b0:	d86c      	bhi.n	8005a8c <UART_SetConfig+0x734>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x660>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	08005a5d 	.word	0x08005a5d
 80059bc:	08005a8d 	.word	0x08005a8d
 80059c0:	08005a8d 	.word	0x08005a8d
 80059c4:	08005a8d 	.word	0x08005a8d
 80059c8:	08005a8d 	.word	0x08005a8d
 80059cc:	08005a8d 	.word	0x08005a8d
 80059d0:	08005a8d 	.word	0x08005a8d
 80059d4:	08005a8d 	.word	0x08005a8d
 80059d8:	08005a65 	.word	0x08005a65
 80059dc:	08005a8d 	.word	0x08005a8d
 80059e0:	08005a8d 	.word	0x08005a8d
 80059e4:	08005a8d 	.word	0x08005a8d
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005a8d 	.word	0x08005a8d
 80059f0:	08005a8d 	.word	0x08005a8d
 80059f4:	08005a8d 	.word	0x08005a8d
 80059f8:	08005a6d 	.word	0x08005a6d
 80059fc:	08005a8d 	.word	0x08005a8d
 8005a00:	08005a8d 	.word	0x08005a8d
 8005a04:	08005a8d 	.word	0x08005a8d
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	08005a8d 	.word	0x08005a8d
 8005a10:	08005a8d 	.word	0x08005a8d
 8005a14:	08005a8d 	.word	0x08005a8d
 8005a18:	08005a75 	.word	0x08005a75
 8005a1c:	08005a8d 	.word	0x08005a8d
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005a8d 	.word	0x08005a8d
 8005a28:	08005a8d 	.word	0x08005a8d
 8005a2c:	08005a8d 	.word	0x08005a8d
 8005a30:	08005a8d 	.word	0x08005a8d
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005a7d 	.word	0x08005a7d
 8005a3c:	08005a8d 	.word	0x08005a8d
 8005a40:	08005a8d 	.word	0x08005a8d
 8005a44:	08005a8d 	.word	0x08005a8d
 8005a48:	08005a8d 	.word	0x08005a8d
 8005a4c:	08005a8d 	.word	0x08005a8d
 8005a50:	08005a8d 	.word	0x08005a8d
 8005a54:	08005a8d 	.word	0x08005a8d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e050      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e04c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e048      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e044      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e040      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8a:	e03c      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a92:	e038      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a71      	ldr	r2, [pc, #452]	; (8005c60 <UART_SetConfig+0x908>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d130      	bne.n	8005b00 <UART_SetConfig+0x7a8>
 8005a9e:	4b6f      	ldr	r3, [pc, #444]	; (8005c5c <UART_SetConfig+0x904>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	d826      	bhi.n	8005af8 <UART_SetConfig+0x7a0>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x758>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	08005ad9 	.word	0x08005ad9
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	2302      	movs	r3, #2
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e01a      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad6:	e016      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005ad8:	2308      	movs	r3, #8
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ade:	e012      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae6:	e00e      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005ae8:	2320      	movs	r3, #32
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e00a      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005af0:	2340      	movs	r3, #64	; 0x40
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e006      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e002      	b.n	8005b06 <UART_SetConfig+0x7ae>
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a55      	ldr	r2, [pc, #340]	; (8005c60 <UART_SetConfig+0x908>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	f040 80f8 	bne.w	8005d02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	dc46      	bgt.n	8005ba8 <UART_SetConfig+0x850>
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	db75      	blt.n	8005c0a <UART_SetConfig+0x8b2>
 8005b1e:	3b02      	subs	r3, #2
 8005b20:	2b1e      	cmp	r3, #30
 8005b22:	d872      	bhi.n	8005c0a <UART_SetConfig+0x8b2>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0x7d4>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005baf 	.word	0x08005baf
 8005b30:	08005c0b 	.word	0x08005c0b
 8005b34:	08005bb7 	.word	0x08005bb7
 8005b38:	08005c0b 	.word	0x08005c0b
 8005b3c:	08005c0b 	.word	0x08005c0b
 8005b40:	08005c0b 	.word	0x08005c0b
 8005b44:	08005bc7 	.word	0x08005bc7
 8005b48:	08005c0b 	.word	0x08005c0b
 8005b4c:	08005c0b 	.word	0x08005c0b
 8005b50:	08005c0b 	.word	0x08005c0b
 8005b54:	08005c0b 	.word	0x08005c0b
 8005b58:	08005c0b 	.word	0x08005c0b
 8005b5c:	08005c0b 	.word	0x08005c0b
 8005b60:	08005c0b 	.word	0x08005c0b
 8005b64:	08005bd7 	.word	0x08005bd7
 8005b68:	08005c0b 	.word	0x08005c0b
 8005b6c:	08005c0b 	.word	0x08005c0b
 8005b70:	08005c0b 	.word	0x08005c0b
 8005b74:	08005c0b 	.word	0x08005c0b
 8005b78:	08005c0b 	.word	0x08005c0b
 8005b7c:	08005c0b 	.word	0x08005c0b
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c0b 	.word	0x08005c0b
 8005b88:	08005c0b 	.word	0x08005c0b
 8005b8c:	08005c0b 	.word	0x08005c0b
 8005b90:	08005c0b 	.word	0x08005c0b
 8005b94:	08005c0b 	.word	0x08005c0b
 8005b98:	08005c0b 	.word	0x08005c0b
 8005b9c:	08005c0b 	.word	0x08005c0b
 8005ba0:	08005c0b 	.word	0x08005c0b
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d02a      	beq.n	8005c02 <UART_SetConfig+0x8aa>
 8005bac:	e02d      	b.n	8005c0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005bae:	f7fe fe99 	bl	80048e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005bb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005bb4:	e02f      	b.n	8005c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fea8 	bl	8004910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc4:	e027      	b.n	8005c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bc6:	f107 0318 	add.w	r3, r7, #24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fff4 	bl	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd4:	e01f      	b.n	8005c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <UART_SetConfig+0x904>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005be2:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <UART_SetConfig+0x904>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	08db      	lsrs	r3, r3, #3
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <UART_SetConfig+0x90c>)
 8005bee:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bf4:	e00f      	b.n	8005c16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bf6:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <UART_SetConfig+0x90c>)
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bfa:	e00c      	b.n	8005c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <UART_SetConfig+0x910>)
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c00:	e009      	b.n	8005c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c08:	e005      	b.n	8005c16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 81ee 	beq.w	8005ffa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <UART_SetConfig+0x914>)
 8005c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4413      	add	r3, r2
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d305      	bcc.n	8005c4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d910      	bls.n	8005c70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c54:	e1d1      	b.n	8005ffa <UART_SetConfig+0xca2>
 8005c56:	bf00      	nop
 8005c58:	40011c00 	.word	0x40011c00
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	58000c00 	.word	0x58000c00
 8005c64:	03d09000 	.word	0x03d09000
 8005c68:	003d0900 	.word	0x003d0900
 8005c6c:	0800671c 	.word	0x0800671c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c72:	2200      	movs	r2, #0
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	60fa      	str	r2, [r7, #12]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	4ac0      	ldr	r2, [pc, #768]	; (8005f80 <UART_SetConfig+0xc28>)
 8005c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2200      	movs	r2, #0
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c92:	f7fa fb2b 	bl	80002ec <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	020b      	lsls	r3, r1, #8
 8005ca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cac:	0202      	lsls	r2, r0, #8
 8005cae:	6979      	ldr	r1, [r7, #20]
 8005cb0:	6849      	ldr	r1, [r1, #4]
 8005cb2:	0849      	lsrs	r1, r1, #1
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4605      	mov	r5, r0
 8005cba:	eb12 0804 	adds.w	r8, r2, r4
 8005cbe:	eb43 0905 	adc.w	r9, r3, r5
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	469a      	mov	sl, r3
 8005cca:	4693      	mov	fp, r2
 8005ccc:	4652      	mov	r2, sl
 8005cce:	465b      	mov	r3, fp
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	f7fa fb0a 	bl	80002ec <__aeabi_uldivmod>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4613      	mov	r3, r2
 8005cde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce6:	d308      	bcc.n	8005cfa <UART_SetConfig+0x9a2>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cee:	d204      	bcs.n	8005cfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	e17f      	b.n	8005ffa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d00:	e17b      	b.n	8005ffa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0a:	f040 80bd 	bne.w	8005e88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005d0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	dc48      	bgt.n	8005da8 <UART_SetConfig+0xa50>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db7b      	blt.n	8005e12 <UART_SetConfig+0xaba>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d879      	bhi.n	8005e12 <UART_SetConfig+0xaba>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x9cc>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005daf 	.word	0x08005daf
 8005d28:	08005db7 	.word	0x08005db7
 8005d2c:	08005e13 	.word	0x08005e13
 8005d30:	08005e13 	.word	0x08005e13
 8005d34:	08005dbf 	.word	0x08005dbf
 8005d38:	08005e13 	.word	0x08005e13
 8005d3c:	08005e13 	.word	0x08005e13
 8005d40:	08005e13 	.word	0x08005e13
 8005d44:	08005dcf 	.word	0x08005dcf
 8005d48:	08005e13 	.word	0x08005e13
 8005d4c:	08005e13 	.word	0x08005e13
 8005d50:	08005e13 	.word	0x08005e13
 8005d54:	08005e13 	.word	0x08005e13
 8005d58:	08005e13 	.word	0x08005e13
 8005d5c:	08005e13 	.word	0x08005e13
 8005d60:	08005e13 	.word	0x08005e13
 8005d64:	08005ddf 	.word	0x08005ddf
 8005d68:	08005e13 	.word	0x08005e13
 8005d6c:	08005e13 	.word	0x08005e13
 8005d70:	08005e13 	.word	0x08005e13
 8005d74:	08005e13 	.word	0x08005e13
 8005d78:	08005e13 	.word	0x08005e13
 8005d7c:	08005e13 	.word	0x08005e13
 8005d80:	08005e13 	.word	0x08005e13
 8005d84:	08005e13 	.word	0x08005e13
 8005d88:	08005e13 	.word	0x08005e13
 8005d8c:	08005e13 	.word	0x08005e13
 8005d90:	08005e13 	.word	0x08005e13
 8005d94:	08005e13 	.word	0x08005e13
 8005d98:	08005e13 	.word	0x08005e13
 8005d9c:	08005e13 	.word	0x08005e13
 8005da0:	08005e13 	.word	0x08005e13
 8005da4:	08005e05 	.word	0x08005e05
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d02e      	beq.n	8005e0a <UART_SetConfig+0xab2>
 8005dac:	e031      	b.n	8005e12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dae:	f7fd fbaf 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8005db2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005db4:	e033      	b.n	8005e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db6:	f7fd fbc1 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8005dba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dbc:	e02f      	b.n	8005e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe fda4 	bl	8004910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dcc:	e027      	b.n	8005e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dce:	f107 0318 	add.w	r3, r7, #24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fef0 	bl	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ddc:	e01f      	b.n	8005e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dde:	4b69      	ldr	r3, [pc, #420]	; (8005f84 <UART_SetConfig+0xc2c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dea:	4b66      	ldr	r3, [pc, #408]	; (8005f84 <UART_SetConfig+0xc2c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	08db      	lsrs	r3, r3, #3
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	4a64      	ldr	r2, [pc, #400]	; (8005f88 <UART_SetConfig+0xc30>)
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dfc:	e00f      	b.n	8005e1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005dfe:	4b62      	ldr	r3, [pc, #392]	; (8005f88 <UART_SetConfig+0xc30>)
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e02:	e00c      	b.n	8005e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e04:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <UART_SetConfig+0xc34>)
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e10:	e005      	b.n	8005e1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80ea 	beq.w	8005ffa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	4a55      	ldr	r2, [pc, #340]	; (8005f80 <UART_SetConfig+0xc28>)
 8005e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e38:	005a      	lsls	r2, r3, #1
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	441a      	add	r2, r3
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	d916      	bls.n	8005e80 <UART_SetConfig+0xb28>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e58:	d212      	bcs.n	8005e80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f023 030f 	bic.w	r3, r3, #15
 8005e62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e72:	4313      	orrs	r3, r2
 8005e74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	e0bc      	b.n	8005ffa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e86:	e0b8      	b.n	8005ffa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	dc4b      	bgt.n	8005f28 <UART_SetConfig+0xbd0>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f2c0 8087 	blt.w	8005fa4 <UART_SetConfig+0xc4c>
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	f200 8084 	bhi.w	8005fa4 <UART_SetConfig+0xc4c>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0xb4c>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005f2f 	.word	0x08005f2f
 8005ea8:	08005f37 	.word	0x08005f37
 8005eac:	08005fa5 	.word	0x08005fa5
 8005eb0:	08005fa5 	.word	0x08005fa5
 8005eb4:	08005f3f 	.word	0x08005f3f
 8005eb8:	08005fa5 	.word	0x08005fa5
 8005ebc:	08005fa5 	.word	0x08005fa5
 8005ec0:	08005fa5 	.word	0x08005fa5
 8005ec4:	08005f4f 	.word	0x08005f4f
 8005ec8:	08005fa5 	.word	0x08005fa5
 8005ecc:	08005fa5 	.word	0x08005fa5
 8005ed0:	08005fa5 	.word	0x08005fa5
 8005ed4:	08005fa5 	.word	0x08005fa5
 8005ed8:	08005fa5 	.word	0x08005fa5
 8005edc:	08005fa5 	.word	0x08005fa5
 8005ee0:	08005fa5 	.word	0x08005fa5
 8005ee4:	08005f5f 	.word	0x08005f5f
 8005ee8:	08005fa5 	.word	0x08005fa5
 8005eec:	08005fa5 	.word	0x08005fa5
 8005ef0:	08005fa5 	.word	0x08005fa5
 8005ef4:	08005fa5 	.word	0x08005fa5
 8005ef8:	08005fa5 	.word	0x08005fa5
 8005efc:	08005fa5 	.word	0x08005fa5
 8005f00:	08005fa5 	.word	0x08005fa5
 8005f04:	08005fa5 	.word	0x08005fa5
 8005f08:	08005fa5 	.word	0x08005fa5
 8005f0c:	08005fa5 	.word	0x08005fa5
 8005f10:	08005fa5 	.word	0x08005fa5
 8005f14:	08005fa5 	.word	0x08005fa5
 8005f18:	08005fa5 	.word	0x08005fa5
 8005f1c:	08005fa5 	.word	0x08005fa5
 8005f20:	08005fa5 	.word	0x08005fa5
 8005f24:	08005f97 	.word	0x08005f97
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d037      	beq.n	8005f9c <UART_SetConfig+0xc44>
 8005f2c:	e03a      	b.n	8005fa4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f2e:	f7fd faef 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8005f32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f34:	e03c      	b.n	8005fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f36:	f7fd fb01 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8005f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f3c:	e038      	b.n	8005fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fce4 	bl	8004910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f4c:	e030      	b.n	8005fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fe30 	bl	8004bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f5c:	e028      	b.n	8005fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <UART_SetConfig+0xc2c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d012      	beq.n	8005f90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <UART_SetConfig+0xc2c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <UART_SetConfig+0xc30>)
 8005f76:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f7c:	e018      	b.n	8005fb0 <UART_SetConfig+0xc58>
 8005f7e:	bf00      	nop
 8005f80:	0800671c 	.word	0x0800671c
 8005f84:	58024400 	.word	0x58024400
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <UART_SetConfig+0xccc>)
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f94:	e00c      	b.n	8005fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <UART_SetConfig+0xcd0>)
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f9a:	e009      	b.n	8005fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fa2:	e005      	b.n	8005fb0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fae:	bf00      	nop
    }

    if (pclk != 0U)
 8005fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d021      	beq.n	8005ffa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	4a1c      	ldr	r2, [pc, #112]	; (800602c <UART_SetConfig+0xcd4>)
 8005fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	441a      	add	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b0f      	cmp	r3, #15
 8005fde:	d909      	bls.n	8005ff4 <UART_SetConfig+0xc9c>
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe6:	d205      	bcs.n	8005ff4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e002      	b.n	8005ffa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2201      	movs	r2, #1
 8006006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006016:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800601a:	4618      	mov	r0, r3
 800601c:	3748      	adds	r7, #72	; 0x48
 800601e:	46bd      	mov	sp, r7
 8006020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006024:	03d09000 	.word	0x03d09000
 8006028:	003d0900 	.word	0x003d0900
 800602c:	0800671c 	.word	0x0800671c

08006030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01a      	beq.n	8006146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612e:	d10a      	bne.n	8006146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b098      	sub	sp, #96	; 0x60
 8006178:	af02      	add	r7, sp, #8
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006184:	f7fb f93c 	bl	8001400 <HAL_GetTick>
 8006188:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d12f      	bne.n	80061f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a0:	2200      	movs	r2, #0
 80061a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f88e 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d022      	beq.n	80061f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c6:	653b      	str	r3, [r7, #80]	; 0x50
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d0:	647b      	str	r3, [r7, #68]	; 0x44
 80061d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e063      	b.n	80062c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b04      	cmp	r3, #4
 8006204:	d149      	bne.n	800629a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006206:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800620e:	2200      	movs	r2, #0
 8006210:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f857 	bl	80062c8 <UART_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d03c      	beq.n	800629a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	623b      	str	r3, [r7, #32]
   return(result);
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
 8006240:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e6      	bne.n	8006220 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	60fb      	str	r3, [r7, #12]
   return(result);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	64bb      	str	r3, [r7, #72]	; 0x48
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006272:	61fa      	str	r2, [r7, #28]
 8006274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	617b      	str	r3, [r7, #20]
   return(result);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e5      	bne.n	8006252 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e012      	b.n	80062c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3758      	adds	r7, #88	; 0x58
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d8:	e049      	b.n	800636e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e0:	d045      	beq.n	800636e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e2:	f7fb f88d 	bl	8001400 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e048      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d031      	beq.n	800636e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d110      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2208      	movs	r2, #8
 800631e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f839 	bl	8006398 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2208      	movs	r2, #8
 800632a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e029      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006348:	d111      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f81f 	bl	8006398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e00f      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	429a      	cmp	r2, r3
 800638a:	d0a6      	beq.n	80062da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006398:	b480      	push	{r7}
 800639a:	b095      	sub	sp, #84	; 0x54
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063be:	643b      	str	r3, [r7, #64]	; 0x40
 80063c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e6      	bne.n	80063a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <UART_EndRxTransfer+0xc8>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e5      	bne.n	80063d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640a:	2b01      	cmp	r3, #1
 800640c:	d118      	bne.n	8006440 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60bb      	str	r3, [r7, #8]
   return(result);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	647b      	str	r3, [r7, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	613b      	str	r3, [r7, #16]
   return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006454:	bf00      	nop
 8006456:	3754      	adds	r7, #84	; 0x54
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	effffffe 	.word	0xeffffffe

08006464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_UARTEx_DisableFifoMode+0x16>
 8006476:	2302      	movs	r3, #2
 8006478:	e027      	b.n	80064ca <HAL_UARTEx_DisableFifoMode+0x66>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2224      	movs	r2, #36	; 0x24
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e02d      	b.n	800654a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f850 	bl	80065d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006566:	2302      	movs	r3, #2
 8006568:	e02d      	b.n	80065c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2224      	movs	r2, #36	; 0x24
 8006576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f812 	bl	80065d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d108      	bne.n	80065f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065f0:	e031      	b.n	8006656 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065f2:	2310      	movs	r3, #16
 80065f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065f6:	2310      	movs	r3, #16
 80065f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	0e5b      	lsrs	r3, r3, #25
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	0f5b      	lsrs	r3, r3, #29
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	7b3a      	ldrb	r2, [r7, #12]
 800661e:	4911      	ldr	r1, [pc, #68]	; (8006664 <UARTEx_SetNbDataToProcess+0x94>)
 8006620:	5c8a      	ldrb	r2, [r1, r2]
 8006622:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006626:	7b3a      	ldrb	r2, [r7, #12]
 8006628:	490f      	ldr	r1, [pc, #60]	; (8006668 <UARTEx_SetNbDataToProcess+0x98>)
 800662a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800662c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	7b7a      	ldrb	r2, [r7, #13]
 800663c:	4909      	ldr	r1, [pc, #36]	; (8006664 <UARTEx_SetNbDataToProcess+0x94>)
 800663e:	5c8a      	ldrb	r2, [r1, r2]
 8006640:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006644:	7b7a      	ldrb	r2, [r7, #13]
 8006646:	4908      	ldr	r1, [pc, #32]	; (8006668 <UARTEx_SetNbDataToProcess+0x98>)
 8006648:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800664a:	fb93 f3f2 	sdiv	r3, r3, r2
 800664e:	b29a      	uxth	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	08006734 	.word	0x08006734
 8006668:	0800673c 	.word	0x0800673c

0800666c <__libc_init_array>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4d0d      	ldr	r5, [pc, #52]	; (80066a4 <__libc_init_array+0x38>)
 8006670:	4c0d      	ldr	r4, [pc, #52]	; (80066a8 <__libc_init_array+0x3c>)
 8006672:	1b64      	subs	r4, r4, r5
 8006674:	10a4      	asrs	r4, r4, #2
 8006676:	2600      	movs	r6, #0
 8006678:	42a6      	cmp	r6, r4
 800667a:	d109      	bne.n	8006690 <__libc_init_array+0x24>
 800667c:	4d0b      	ldr	r5, [pc, #44]	; (80066ac <__libc_init_array+0x40>)
 800667e:	4c0c      	ldr	r4, [pc, #48]	; (80066b0 <__libc_init_array+0x44>)
 8006680:	f000 f820 	bl	80066c4 <_init>
 8006684:	1b64      	subs	r4, r4, r5
 8006686:	10a4      	asrs	r4, r4, #2
 8006688:	2600      	movs	r6, #0
 800668a:	42a6      	cmp	r6, r4
 800668c:	d105      	bne.n	800669a <__libc_init_array+0x2e>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	f855 3b04 	ldr.w	r3, [r5], #4
 8006694:	4798      	blx	r3
 8006696:	3601      	adds	r6, #1
 8006698:	e7ee      	b.n	8006678 <__libc_init_array+0xc>
 800669a:	f855 3b04 	ldr.w	r3, [r5], #4
 800669e:	4798      	blx	r3
 80066a0:	3601      	adds	r6, #1
 80066a2:	e7f2      	b.n	800668a <__libc_init_array+0x1e>
 80066a4:	0800674c 	.word	0x0800674c
 80066a8:	0800674c 	.word	0x0800674c
 80066ac:	0800674c 	.word	0x0800674c
 80066b0:	08006750 	.word	0x08006750

080066b4 <memset>:
 80066b4:	4402      	add	r2, r0
 80066b6:	4603      	mov	r3, r0
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d100      	bne.n	80066be <memset+0xa>
 80066bc:	4770      	bx	lr
 80066be:	f803 1b01 	strb.w	r1, [r3], #1
 80066c2:	e7f9      	b.n	80066b8 <memset+0x4>

080066c4 <_init>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr

080066d0 <_fini>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr
